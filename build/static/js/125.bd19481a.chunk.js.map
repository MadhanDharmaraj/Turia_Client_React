{"version":3,"sources":["views/pages/authentication/InvitationRegister.js","@core/components/input-password-toggle/index.js"],"names":["invitationRegister","uniquekey","useParams","useState","invitaion","setInvitation","defaultValues","email","password","uniqueKey","useForm","control","handleSubmit","errors","formState","useEffect","axios","post","then","res","data","catch","err","console","log","className","to","onClick","e","preventDefault","viewBox","version","height","x1","y1","x2","y2","id","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","tag","onSubmit","for","name","render","field","autoFocus","type","disabled","placeholder","invalid","loginEmail","color","block","InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","inputVisibility","setInputVisibility","classnames","size","renderIcon","defaultProps"],"mappings":"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","file":"static/js/125.bd19481a.chunk.js","sourcesContent":["// ** React Imports\nimport { Link, useParams } from 'react-router-dom'\nimport axios from '@src/configs/axios/axiosConfig'\n// ** Custom Components\nimport InputPasswordToggle from '@components/input-password-toggle'\n\n// ** Reactstrap Imports\nimport { Card, CardBody, CardTitle, CardText, Form, Label, Input, Button } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/pages/page-authentication.scss'\nimport { useEffect, useState } from 'react'\nimport { Controller, useForm } from 'react-hook-form'\n\nconst invitationRegister = () => {\n\n  const { uniquekey } = useParams()\n  const [invitaion, setInvitation] = useState({})\n\n  const defaultValues = {\n    email: invitaion.email,\n    password: '',\n    uniqueKey: uniquekey\n  }\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({ defaultValues })\n\n  const getInvitation = () => {\n    axios.post('/invitations/getinvitation', { uniquekey })\n      .then((res) => { setInvitation(res.data) })\n      .catch((err) => { console.log(err) })\n  }\n\n  const onSubmit = (data) => {\n      console.log(data)\n  }\n\n  useEffect(() => {\n    if (uniquekey) {\n      getInvitation()\n    }\n  }, [uniquekey])\n\n  return (\n    <div className='auth-wrapper auth-basic px-2'>\n      <div className='auth-inner my-2'>\n        <Card className='mb-0'>\n          <CardBody>\n            <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n              <svg viewBox='0 0 139 95' version='1.1' height='28'>\n                <defs>\n                  <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\n                    <stop stopColor='#000000' offset='0%'></stop>\n                    <stop stopColor='#FFFFFF' offset='100%'></stop>\n                  </linearGradient>\n                  <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\n                    <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\n                    <stop stopColor='#FFFFFF' offset='100%'></stop>\n                  </linearGradient>\n                </defs>\n                <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\n                  <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\n                    <g id='Group' transform='translate(400.000000, 178.000000)'>\n                      <path\n                        d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\n                        id='Path'\n                        className='text-primary'\n                        style={{ fill: 'currentColor' }}\n                      ></path>\n                      <path\n                        d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\n                        id='Path'\n                        fill='url(#linearGradient-1)'\n                        opacity='0.2'\n                      ></path>\n                      <polygon\n                        id='Path-2'\n                        fill='#000000'\n                        opacity='0.049999997'\n                        points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\n                      ></polygon>\n                      <polygon\n                        id='Path-2'\n                        fill='#000000'\n                        opacity='0.099999994'\n                        points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\n                      ></polygon>\n                      <polygon\n                        id='Path-3'\n                        fill='url(#linearGradient-2)'\n                        opacity='0.099999994'\n                        points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\n                      ></polygon>\n                    </g>\n                  </g>\n                </g>\n              </svg>\n              <h2 className='brand-text text-primary ms-1'>Turia</h2>\n            </Link>\n            <CardTitle tag='h4' className='mb-1'>\n              Welcome to Turia! ðŸ‘‹\n            </CardTitle>\n            <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>\n            <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n              <div className='mb-1'>\n                <Label className='form-label' for='login-email'>\n                  Email\n                </Label>\n                <Controller\n                  id='loginEmail'\n                  name='email'\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      autoFocus\n                      type='email'\n                      disabled\n                      placeholder='john@example.com'\n                      invalid={errors.loginEmail && true}\n                      {...field}\n                    />\n                  )}\n                />\n              </div>\n              <div className='mb-1'>\n                <div className='d-flex justify-content-between'>\n                  <Label className='form-label' for='login-password'>\n                    Password\n                  </Label>\n                </div>\n                <Controller\n                  id='password'\n                  name='password'\n                  control={control}\n                  render={({ field }) => (\n                    <InputPasswordToggle className='input-group-merge' invalid={errors.password && true} {...field} />\n                  )}\n                />\n              </div>\n              <div className='form-check mb-1'>\n                <Input type='checkbox' id='remember-me' />\n                <Label className='form-check-label' for='remember-me'>\n                  Remember Me\n                </Label>\n              </div>\n              <Button color='primary' block>\n                Sign in\n              </Button>\n            </Form>\n          </CardBody>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\nexport default invitationRegister\n","// ** React Imports\nimport { Fragment, useState, forwardRef } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className='form-label' for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          'is-invalid': invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : 'Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}
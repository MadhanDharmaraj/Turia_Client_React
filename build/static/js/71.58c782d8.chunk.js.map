{"version":3,"sources":["views/apps/digital-signature/add/AddCard.js","views/apps/digital-signature/add/index.js","helper/sassHelper.js"],"names":["activeOrgId","activeOrganizationid","AddCard","dispatch","useDispatch","store","useSelector","state","digitalsignature","navigate","useNavigate","useState","clientId","setClientId","schema","yup","shape","required","rows","of","name","organizationId","default","email","contact","matches","message","excludeEmptyString","issuedDate","expiryDate","password","min","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","clientOptions","setClientOptions","useFieldArray","keyName","fields","append","remove","onSubmit","data","a","console","log","addDsc","addItem","_formValues","forEach","obj","key","getClientInfo","id","DSCList","useEffect","DSCLists","axios","post","then","response","arr","clients","className","md","sm","size","for","render","field","ref","inputRef","classnames","classNamePrefix","options","value","find","c","onChange","val","getOptionLabel","option","getOptionValue","map","item","i","type","register","invalid","lg","date","dateStr","altInput","altFormat","dateFormat","onClick","rowid","color","outline","tag","Link","to","ServiceAdd","xl","localStorage","getItem","JSON","parse","activeOrganization"],"mappings":"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","file":"static/js/71.58c782d8.chunk.js","sourcesContent":["// ** React Imports\nimport { useEffect, useState } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport classnames from 'classnames'\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus } from 'react-feather'\nimport Select from 'react-select'\nimport { DSCList, addDsc } from '../store/index'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\n//import moment from 'moment'\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, CardText, Input, FormFeedback } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { activeOrganizationid } from '@src/helper/sassHelper'\n\nconst activeOrgId = activeOrganizationid()\nconst AddCard = () => {\n\n  const phoneRegExp = /^[0-9\\- ]{10,10}$/\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.digitalsignature)\n  const navigate = useNavigate()\n  const [clientId, setClientId] = useState(null)\n  const schema = yup.object().shape({\n    clientId: yup.string().required(\"Please select a Client\"),\n    rows: yup.array().of(\n      yup.object().shape({\n        name: yup.string().required(\"Please Enter Name\"),\n        organizationId: yup.string().default(activeOrgId),\n        email: yup.string().email().required(\"Please Enter Email\"),\n        contact: yup.string().matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true }),\n        issuedDate: yup.number().required(\"Please Enter Issued Date\"),\n        expiryDate: yup.number().required(\"Please Enter Expiry Date\"),\n        password: yup.string().min(5, \"Password length should be 5 or above.\")\n      })\n    )\n  })\n\n  const { handleSubmit, formState: { errors }, control } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  //const [date, setDate] = useState(\"\")\n  const [clientOptions, setClientOptions] = useState([])\n  const { fields, append, remove } = useFieldArray({ name: 'rows', keyName: 'rowid', control })\n  const onSubmit = async data => {\n    console.log(data)\n    await dispatch(addDsc(data))\n    navigate('/digital-signature/list')\n\n  }\n\n  const addItem = (() => {\n    append({ clientId: '', name: '', email: '', contact: '', issuedDate: '', expiryDate: '', password: '' })\n\n    control._formValues.rows.forEach((obj, key) => {\n      control._formValues.rows[key].clientId = clientId\n    })\n    console.log(control._formValues.rows)\n\n  })\n\n  const removeItem = (ind) => {\n    remove(ind)\n  }\n\n  // const compareDate = (fie) => {\n\n  //   console.log(fie)\n  //   // if (control._formValues.rows[ind].issuedDate !== '' && control._formValues.rows[ind].expiryDate !== '') {\n  //   //   const issDate = control._formValues.rows[ind].issuedDate[0]\n  //   //   const expDate = control._formValues.rows[ind].expiryDate[0]\n\n  //   //   if (expDate < issDate) {\n  //   //     console.log('Success Date')\n  //   //   }\n  // }\n\n  const getClientList = () => {\n    axios.post('/clients/dropdown').then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getClientInfo = async (id) => {\n    setClientId(id)\n    remove()\n    await dispatch(DSCList(id))\n  }\n\n  useEffect(() => {\n    store.DSCLists.forEach((obj) => {\n      const data = {}\n\n      data['name'] = obj.name\n      data['email'] = obj.email\n      data['organizationId'] = activeOrgId\n      data['clientId'] = clientId\n      data['contact'] = obj.contact\n      data['issuedDate'] = obj.issuedDate | null\n      data['expiryDate'] = obj.expiryDate | null\n      data['password'] = obj.password | ''\n\n      append(data)\n    })\n\n  }, [store.DSCLists])\n\n  useEffect(() => {\n    getClientList()\n    addItem()\n  }, [])\n\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Card className='invoice-preview-card'>\n        {/* Header */}\n        <CardBody className='pb-0'>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='clientId'>\n                  Client\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"clientId\"\n                    id=\"clientId\"\n                    render={({ field, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.clientId })}\n                        classNamePrefix='select'\n                        options={clientOptions}\n                        value={clientOptions.find(c => { return c.id === field.value })}\n                        onChange={(val) => { field.onChange(val.id); getClientInfo(val.id) }}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n                  />\n                  {errors.clientId && <FormFeedback className='text-danger'>{errors.clientId?.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </CardBody>\n        <CardBody className='invoice-padding invoice-product-details'>\n          {fields.map((item, i) => (\n            <div key={item.rowid} className='repeater-wrapper'>\n              <Row >\n                <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                  <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                    <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Name</CardText>\n                      <Controller\n                        control={control}\n                        id='dsc_list_name'\n                        name={`rows[${i}].name`}\n                        render={({ field }) => (\n                          <Input type='text'  {...register(`rows.${i}.name`)} invalid={errors.rows?.[i]?.name && true} {...field} />\n                        )}\n                      />\n                      {errors.rows?.[i]?.name && <FormFeedback>{errors.rows?.[i]?.name.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2 col-lg-2 col-sm-12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Email</CardText>\n                      <Controller\n                        control={control}\n                        id='dsc_list_email'\n                        name={`rows[${i}].email`}\n                        render={({ field }) => (\n                          <Input type='email'  {...register(`rows.${i}.email`)} invalid={errors.rows?.[i]?.email && true} {...field} />\n                        )}\n                      />\n                      {errors.rows?.[i]?.email && <FormFeedback>{errors.rows?.[i]?.email.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Mobile</CardText>\n                      <Controller\n                        control={control}\n                        id='dsc_list_contactNumber'\n                        name={`rows[${i}].contact`}\n                        render={({ field }) => (\n                          <Input type='number' {...register(`rows.${i}.contact`)} invalid={errors.rows?.[i]?.contact && true} {...field} />\n                        )}\n                      />\n                      {errors.rows?.[i]?.contact && <FormFeedback>{errors.rows?.[i]?.contact.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Issued Date</CardText>\n                      <Controller\n                        control={control}\n                        id='dsc_list_issuedDate'\n                        name={`rows[${i}].issuedDate`}\n                        render={({ field }) => (\n                          <Flatpickr\n                            value={field.value}\n                            onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                            options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                            className='form-control invoice-edit-input date-picker'\n                          />\n                        )}\n                      />\n                      {errors.rows?.[i]?.issuedDate && <FormFeedback>{errors.rows?.[i]?.issuedDate.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Expiry Date</CardText>\n                      <Controller\n                        control={control}\n                        id='dsc_list_expiryDate'\n                        name={`rows[${i}].expiryDate`}\n                        render={({ field }) => (\n                          <Flatpickr\n                            value={field.value}\n                            onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                            options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                            className='form-control invoice-edit-input date-picker'\n                          />\n                        )}\n                      />\n                      {errors.rows?.[i]?.expiryDate && <FormFeedback>{errors.rows?.[i]?.expiryDate.message}</FormFeedback>}\n                    </Col>\n                    <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                      <CardText className='col-title mb-md-50 mb-0'>Password</CardText>\n                      <Controller\n                        control={control}\n                        id='dsc_list_password'\n                        name={`rows[${i}].password`}\n                        render={({ field }) => (\n                          <Input type='text' invalid={errors.rows?.[i]?.password && true} {...field} />\n                        )}\n                      />\n                      {errors.rows?.[i]?.password && <FormFeedback>{errors.rows?.[i]?.password.message}</FormFeedback>}\n                    </Col>\n                  </Row>\n                  <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                    <X size={18} className='cursor-pointer' onClick={() => removeItem(i)} />\n                  </div>\n                </Col>\n              </Row>\n            </div>\n          ))}\n\n          <Row className='mt-1'>\n            <Col sm='12' className='px-0'>\n              <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n              </Button>\n            </Col>\n          </Row>\n\n        </CardBody>\n        {/* /Header */}\n      </Card>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button color='warning' outline tag={Link} to='/digital-signature/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"submit\" >\n              Save\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </form>\n  )\n}\n\nexport default AddCard\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ServiceAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <AddCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ServiceAdd\n","export const activeOrganizationid = () => {\n    return localStorage.getItem('activeOrganization') === null ? null : JSON.parse(localStorage.getItem('activeOrganization'))['id']\n}\n\nexport const activeOrganization = () => {\n    return localStorage.getItem('activeOrganization') === null ? null : JSON.parse(localStorage.getItem('activeOrganization'))\n}\n\nexport const loggedInUser = () => { \n    return localStorage.getItem('userData') === null ? null : JSON.parse(localStorage.getItem('userData'))\n}"],"sourceRoot":""}
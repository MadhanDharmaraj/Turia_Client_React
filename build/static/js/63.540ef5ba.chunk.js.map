{"version":3,"sources":["views/apps/team/add/RoleCards.js","views/apps/team/add/AddCard.js","views/apps/team/add/index.js","helper/sassHelper.js"],"names":["rolesArr","RoleCards","className","xs","responsive","map","role","index","type","id","for","activeOrgId","activeOrganizationid","AddCard","dispatch","useDispatch","navigate","useNavigate","schema","yup","shape","organizationId","default","firstName","required","lastName","name","contactNo","max","min","userTypeId","email","designationId","roleId","invitedAt","moment","unix","expiryDate","add","departmentId","isRegistered","invitedBy","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","control","errors","formState","useState","departmentOptions","setDepartmentOptions","designationOptions","setDesignationOptions","rolesOptions","setRolesOptions","useEffect","axios","post","then","res","data","designations","catch","departments","roles","onSubmit","a","_formValues","addUser","md","sm","size","render","field","invalid","message","value","ref","inputRef","classnames","classNamePrefix","options","find","c","onChange","val","getOptionLabel","option","getOptionValue","color","outline","tag","Link","to","TeamAdd","xl","localStorage","getItem","JSON","parse","activeOrganization"],"mappings":"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","file":"static/js/63.540ef5ba.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment } from 'react'\nimport { Link } from 'react-router-dom'\n\n// ** Reactstrap Imports\nimport {\n  Row,\n  Col,\n  Card,\n  Label,\n  Input,\n  Table,\n  CardBody\n} from 'reactstrap'\n\n// ** Vars\nconst rolesArr = [\n  'Client',\n  'Service',\n  'Sales',\n  'Task',\n  'Team',\n  'Setting',\n  'Digital Signature',\n  'Attendance',\n  'Leave'\n]\n\nconst RoleCards = () => {\n  \n  return (\n    <Fragment>\n      <Card>\n        <CardBody className='p-0'>\n          <Row >\n            <Col xs={12}>\n              <h4 className='mt-2 pt-50'>Role Permissions</h4>\n              <Table className='table-flush-spacing' responsive>\n                <tbody>\n                  {rolesArr.map((role, index) => {\n                    return (\n\n                      <tr key={index}>\n                        <td className='text-nowrap fw-bolder'>{role}</td>\n                        <td>\n                          <div className='d-flex'>\n                            <div className='form-check me-3 me-lg-5'>\n                              <Input type='checkbox' id={`read-${role}`} />\n                              <Label className='form-check-label' for={`read-${role}`}>\n                                Read\n                              </Label>\n                            </div>\n                            <div className='form-check me-3 me-lg-5'>\n                              <Input type='checkbox' id={`write-${role}`} />\n                              <Label className='form-check-label' for={`write-${role}`}>\n                                Write\n                              </Label>\n                            </div>\n                            <div className='form-check me-3 me-lg-5'>\n                              <Input type='checkbox' id={`delete-${role}`} />\n                              <Label className='form-check-label' for={`delete-${role}`}>\n                                Delete\n                              </Label>\n                            </div>\n                            <div className='form-check me-3 me-lg-5'>\n                              <Input type='checkbox' id={`import-${role}`} />\n                              <Label className='form-check-label' for={`import-${role}`}>\n                                import\n                              </Label>\n                            </div>\n                            <div className='form-check'>\n                              <Input type='checkbox' id={`export-${role}`} />\n                              <Label className='form-check-label' for={`export-${role}`}>\n                                Export\n                              </Label>\n                            </div>\n                          </div>\n                        </td>\n                      </tr>\n                    )\n                  })}\n                </tbody>\n              </Table>\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n    </Fragment>\n  )\n}\n\nexport default RoleCards\n","// ** React Imports\nimport { Link, useNavigate } from 'react-router-dom'\nimport classnames from 'classnames'\n// ** Third Party Components\nimport RoleCards from './RoleCards'\nimport Select from 'react-select'\nimport { useForm, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport axios from '@src/configs/axios/axiosConfig'\n\nimport { addUser } from '../store/index'\nimport { Row, Col, Card, Label, Button, CardBody, Input, FormFeedback } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { useEffect, useState } from 'react'\nimport { activeOrganizationid } from '@src/helper/sassHelper'\nimport moment from 'moment'\nimport { useDispatch } from 'react-redux'\nconst activeOrgId = activeOrganizationid()\n\nconst AddCard = () => {\n\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n\n  // ** States\n  const schema = yup.object().shape({\n    organizationId: yup.string().default(activeOrgId),\n    firstName: yup.string().required(\"Please Enter a First Name\"),\n    lastName: yup.string().required(\"Please Enter a Last Name\"),\n    name: yup.string(),\n    contactNo: yup.string().required(\"Please Enter a Conatct No\").max(10).min(10, \"Invalid Contact No\"),\n    userTypeId: yup.string().default(4),\n    email: yup.string().email(\"Please Enter valid Email\").required(\"Please Enter valid Email\"),\n    designationId: yup.string().required(\"Please Select Designation\"),\n    roleId: yup.string().required(\"Please Select Role\"),\n    invitedAt: yup.string().default(moment().unix()),\n    expiryDate: yup.string().default(moment().add(5, 'days').unix()),\n    departmentId: yup.string().required(\"Please Select Department\"),\n    isRegistered: yup.boolean().default(false),\n    invitedBy: yup.string().default('51')\n  })\n\n  const { handleSubmit, control, formState: { errors } } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const [departmentOptions, setDepartmentOptions] = useState([])\n  const [designationOptions, setDesignationOptions] = useState([])\n  const [rolesOptions, setRolesOptions] = useState([])\n\n  const getDesignation = () => {\n    axios.post('/designations/dropdown').\n      then((res) => {\n        setDesignationOptions(res.data.designations)\n      }).catch(() => { })\n  }\n\n  const getDepartment = () => {\n    axios.post('/departments/dropdown')\n      .then((res) => {\n        setDepartmentOptions(res.data.departments)\n      }).catch(() => { })\n  }\n\n  const getRoles = () => {\n    axios.post('/roles/dropdown').then((res) => { setRolesOptions(res.data.roles) }).catch(() => { })\n  }\n\n  useEffect(() => {\n    getDesignation()\n    getDepartment()\n    getRoles()\n  }, [])\n\n  const onSubmit = async data => {\n    data['name'] = `${control._formValues.firstName} ${control._formValues.lastName}`\n    const res = await dispatch(addUser(data))\n    navigate(`/team/view/${res.id}`)\n\n  }\n\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)} >\n      <Card className='invoice-preview-card'>\n        {/* Header */}\n        <CardBody className='pb-0'>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='firstName'>\n                  First Name\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='firstName'\n                    name='firstName'\n                    control={control}\n                    render={({ field }) => <Input invalid={errors.firstName && true} {...field} />}\n                  />\n                  {errors.firstName && <FormFeedback>{errors.firstName.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='lastName'>\n                  Last Name\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    id='lastName'\n                    name='lastName'\n                    render={({ field }) => (\n                      <Input type='text' invalid={errors.lastName && true} {...field} />\n                    )}\n                  />\n                  {errors.lastName && <FormFeedback>{errors.lastName.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='contactNo'>\n                  Conatct No\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='contactNo'\n                    name='contactNo'\n                    control={control}\n                    render={({ field }) => <Input invalid={errors.contactNo && true} {...field} />}\n                  />\n                  {errors.contactNo && <FormFeedback>{errors.contactNo.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='email'>\n                  Email\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    id='email'\n                    name='email'\n                    render={({ field }) => (\n                      <Input type='email' invalid={errors.email && true} {...field} />\n                    )}\n                  />\n                  {errors.email && <FormFeedback>{errors.email.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='designationId'>\n                  Designation\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"designationId\"\n                    id=\"designationId\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.designationId })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={designationOptions}\n                        value={designationOptions.find(c => { return c.id === value })}\n                        onChange={val => field.onChange(val.id)}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.designationId && <FormFeedback className='text-danger'>{errors.designationId?.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='roleId'>\n                  Role\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"roleId\"\n                    id=\"roleId\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.roleId })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={rolesOptions}\n                        value={rolesOptions.find(c => { return c.id === value })}\n                        onChange={val => field.onChange(val.id)}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.roleId && <FormFeedback className='text-danger'>{errors.roleId?.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n          <Row>\n            <Col md='6' className='mb-1'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='departmentId'>\n                  Department\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"departmentId\"\n                    id=\"departmentId\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.departmentId })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={departmentOptions}\n                        value={departmentOptions.find(c => { return c.id === value })}\n                        onChange={val => field.onChange(val.id)}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.departmentId && <FormFeedback className='text-danger'>{errors.departmentId?.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </Col>\n\n          </Row>\n\n        </CardBody>\n        {/* /Header */}\n\n        {/* Product Details */}\n        <CardBody className='invoice-padding'>\n          <RoleCards />\n        </CardBody>\n      </Card>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button color='warning' outline tag={Link} to='/team/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"submit\" >\n              Save\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </form>\n  )\n}\n\nexport default AddCard\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst TeamAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <AddCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default TeamAdd\n","export const activeOrganizationid = () => {\n    return localStorage.getItem('activeOrganization') === null ? null : JSON.parse(localStorage.getItem('activeOrganization'))['id']\n}\n\nexport const activeOrganization = () => {\n    return localStorage.getItem('activeOrganization') === null ? null : JSON.parse(localStorage.getItem('activeOrganization'))\n}\n\nexport const loggedInUser = () => { \n    return localStorage.getItem('userData') === null ? null : JSON.parse(localStorage.getItem('userData'))\n}"],"sourceRoot":""}
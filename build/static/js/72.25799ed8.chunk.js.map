{"version":3,"sources":["views/apps/task/add/AddCard.js","views/apps/task/add/index.js","helper/sassHelper.js"],"names":["activeOrgId","activeOrganizationid","activeOrg","activeOrganization","AddCard","inputRef","useRef","useState","date","setDate","schema","yup","shape","clientId","required","serviceId","assignee","min","reviewer","clientAccessFlag","default","organizationId","taskStatus","invoiceId","startDate","nullable","endDate","priority","invoiceFlag","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","setValue","priorityOptions","id","name","assigneeUserOptions","setAssigneeUserOptions","reviewerUserOptions","setReviewerUserOptions","userOptions","dispatch","useDispatch","clientOptions","setClientOptions","serviceOptions","setServiceOptions","taxGroupOptions","setTaxGroupOptions","setinvoiceFlag","taxValues","setTaxValues","selectedClient","setSelectedClient","invoiceData","setInvoiceData","useFieldArray","keyName","fields","append","remove","onSubmit","data","a","console","log","addTask","getClientData","getClient","res","payload","addItem","sacCode","actualPrice","taxGroupId","subTotalAmount","taxPrice","description","taxvaluefn","taxtype","stateid","placeofsupplyid","taxType","type","axios","post","then","response","arr","taxvalues","getTaxValue","useEffect","Object","keys","length","Invoicedata","billingaddresscity","billingaddressline1","billingaddressstatesname","billingaddresszip","parseInt","currencyid","currenciessymbol","currenciescode","currenciesname","email","gstin","addressline1","addressline2","organizationcity","statename","pinzipcode","stateshortname","clients","services","taxgroups","handleAssigneeChange","e","reviewerOptions","tempArr","Array","isArray","map","x","filter","id1","some","id2","handleReviwerChange","assigneeOptions","className","sm","size","for","render","field","value","ref","classnames","classNamePrefix","options","find","c","onChange","val","getOptionLabel","option","getOptionValue","message","invalid","multiple","event","target","files","outline","color","onClick","current","click","isMulti","rules","dateFormat","dateStr","altInput","altFormat","item","i","lg","invoice_items","itemId","sac_code","price","tax_group_id","rowid","tag","Link","to","TaskAdd","xl","md","localStorage","getItem","JSON","parse"],"mappings":"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","file":"static/js/72.25799ed8.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect, useRef } from 'react'\nimport { Link } from 'react-router-dom'\n// ** Custom Components\nimport classnames from 'classnames'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus } from 'react-feather'\nimport Select, { components } from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\nimport { getClient, addTask } from '../store'\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, CardText, FormFeedback, Input } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { activeOrganizationid, activeOrganization } from '@src/helper/sassHelper'\nimport { useDispatch } from 'react-redux'\n\nconst activeOrgId = activeOrganizationid()\nconst activeOrg = activeOrganization()\n\nconst AddCard = () => {\n  // ** States\n\n  const inputRef = useRef(null)\n  const [setOpen] = useState(false)\n  const [date, setDate] = useState(\"\")\n\n  const schema = yup.object().shape({\n    clientId: yup.number().required(\"Please select a Client\"),\n    serviceId: yup.number().required(\"Please select a Service\"),\n    assignee: yup.array().min(1, \"Please select Assignee\"),\n    reviewer: yup.array(),\n    clientAccessFlag: yup.boolean().default(false),\n    organizationId: yup.number().default(activeOrgId),\n    taskStatus: yup.number().default(1),\n    invoiceId: yup.number().default(0),\n    startDate: yup.string()\n      .nullable()\n      .required('Please Select Start Date'),\n    endDate: yup.string()\n      .nullable()\n      .required('Please Select End Date'),\n    priority: yup.string().required(\"Please select a Priority\"),\n    invoiceFlag: yup.boolean().default(false)\n    // invoice_items: yup.array().of(\n    //   yup.object().shape({\n    // serviceId: yup.number().required(\"Please Select Service Item\"),\n    // invoiceId: yup.number(),\n    // sacCode: yup.string(),\n    // price: yup.string(),\n    // organizationId: yup.number().default(activeOrgId),\n    // exemptioReasonId: yup.number(),\n    // actualPrice: yup.string().required(),\n    // taxGroupId: yup.number().required(\"Pleace Select Tax\"),\n    // subTotalAmount: yup.string().required(1)\n    //   })\n    // )\n  })\n\n  const { handleSubmit, formState: { errors }, control, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const priorityOptions = [\n    { id: 1, name: \"Low\" },\n    { id: 2, name: \"Medium\" },\n    { id: 3, name: \"High\" }\n  ]\n\n  const [assigneeUserOptions, setAssigneeUserOptions] = useState([{ id: 1, name: 'Madhan' }, { id: 2, name: 'Kavin' }, { id: 3, name: 'Akhalya' }])\n  const [reviewerUserOptions, setReviewerUserOptions] = useState([{ id: 1, name: 'Madhan' }, { id: 2, name: 'Kavin' }, { id: 3, name: 'Akhalya' }])\n  const userOptions = [{ id: 1, name: 'Madhan' }, { id: 2, name: 'Kavin' }, { id: 3, name: 'Akhalya' }]\n\n  const dispatch = useDispatch()\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  //const [userOptions, setUserOptions] = useState([])\n  const [taxGroupOptions, setTaxGroupOptions] = useState([])\n  const [invoiceFlag, setinvoiceFlag] = useState(true)\n  const [taxValues, setTaxValues] = useState([])\n  const [selectedClient, setSelectedClient] = useState({})\n  const [invoiceData, setInvoiceData] = useState({})\n  const { fields, append, remove } = useFieldArray({ name: 'invoice_items', keyName: 'rowid', control })\n\n  const onSubmit = async data => {\n    console.log(data)\n    console.log(invoiceData)\n    await dispatch(addTask(data))\n  }\n\n  const getClients = () => {\n    axios.post('/clients/dropdown').then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getServices = () => {\n    axios.post('/services/dropdown').then(response => {\n      const arr = response.data\n      setServiceOptions(arr.services)\n    })\n  }\n\n  const getTaxGroups = () => {\n    axios.post('/taxgroups/dropdown').then(response => {\n      const arr = response.data\n      setTaxGroupOptions(arr.taxgroups)\n    })\n  }\n\n  const getClientData = async (id) => {\n    const res = await dispatch(getClient(id))\n    setSelectedClient(res.payload)\n  }\n\n  const getTaxValue = (taxType) => {\n    const data = {\n      type: taxType\n    }\n    axios.post('/taxvalues/list', data).then(response => {\n      const arr = response.data\n      setTaxValues(arr.taxvalues)\n    })\n\n    console.log(taxValues)\n  }\n\n\n  const addItem = (() => {\n    append({ invoiceId: 0, organizationId: activeOrgId, serviceId: '', sacCode: '', actualPrice: 0, taxGroupId: '', subTotalAmount: 0, taxPrice: 0, description: '' })\n  })\n\n  const removeItem = ((val) => {\n    remove(val)\n  })\n\n\n  const taxvaluefn = () => {\n    let taxtype = 1\n    if (activeOrg.stateid === selectedClient.placeofsupplyid) {\n      taxtype = 2\n    }\n\n    getTaxValue(taxtype)\n\n  }\n\n  useEffect(() => {\n    if (Object.keys(selectedClient).length > 0) {\n      const Invoicedata = {}\n      Invoicedata['billingAddressCity'] = selectedClient.billingaddresscity\n      Invoicedata['billingAddressLine1'] = selectedClient.billingaddressline1\n      Invoicedata['billingAddressLine2'] = selectedClient.billingaddressline1\n      Invoicedata['billingAddressState'] = selectedClient.billingaddressstatesname\n      Invoicedata['billingAddressZipCode'] = selectedClient.billingaddresszip\n      Invoicedata['billingCurrencyId'] = parseInt(selectedClient.currencyid)\n      Invoicedata['billingCurrencySymbol'] = selectedClient.currenciessymbol\n      Invoicedata['billingCurrencyShortName'] = selectedClient.currenciescode\n      Invoicedata['billingCurrencyName'] = selectedClient.currenciesname\n      Invoicedata['contactEmail'] = selectedClient.email\n      Invoicedata['gstin'] = selectedClient.gstin\n      Invoicedata['isRcmApplicable'] = false\n      Invoicedata['contactName'] = selectedClient.name\n      Invoicedata['placeOfSupplyId'] = selectedClient.placeofsupplyid\n      Invoicedata['contactId'] = selectedClient.id\n      Invoicedata['organizationAddressLine1'] = activeOrg.addressline1\n      Invoicedata['organizationAddressLine2'] = activeOrg.addressline2\n      Invoicedata['organizationCity'] = activeOrg.organizationcity\n      Invoicedata['organizationState'] = activeOrg.statename\n      Invoicedata['organizationZipCode'] = activeOrg.pinzipcode\n      Invoicedata['organizationName'] = activeOrg.name\n      Invoicedata['organizationImageUrl'] = ''\n      Invoicedata['organizationStateCode'] = activeOrg.stateshortname\n      Invoicedata['organizationGstin'] = activeOrg.gstin\n\n      setInvoiceData(Invoicedata)\n      taxvaluefn()\n    }\n\n  }, [selectedClient])\n\n  useEffect(() => {\n    getClients()\n    getServices()\n    getTaxGroups()\n  }, [])\n\n  useEffect(() => {\n    addItem()\n  }, [])\n\n  // handle onChange event of the dropdown\n  const handleAssigneeChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    let reviewerOptions\n    if (tempArr.length > 0) {\n      reviewerOptions = userOptions.filter(({ id: id1 }) => !tempArr.some(id2 => id2 === id1))\n    } else { reviewerOptions = userOptions }\n\n    setReviewerUserOptions(reviewerOptions)\n    setValue(\"assignee\", tempArr)\n  }\n\n  const handleReviwerChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    let assigneeOptions\n    if (tempArr.length > 0) {\n      assigneeOptions = userOptions.filter(({ id: id1 }) => !tempArr.some(id2 => id2 === id1))\n    } else { assigneeOptions = userOptions }\n\n    setAssigneeUserOptions(assigneeOptions)\n    setValue(\"reviewer\", tempArr)\n  }\n\n  const changeHandler = (event) => {\n    console.log(event.target.files)\n  }\n\n  // const handleSubmission = () => {\n  //   const formData = new FormData()\n\n  //     // Update the formData object\n  //     formData.append(\n  //       \"myFile\",\n  //       selectedFile,\n  //       selectedFile.name\n  //     )\n\n  //     // Details of the uploaded file\n  //     console.log(selectedFile)\n  // }\n\n  // ** Custom Options Component\n  const OptionComponent = ({ data, ...props }) => {\n    if (data.type === 'button') {\n      return (\n        <Button className='text-start rounded-0 px-50' color={data.color} block onClick={() => setOpen(true)}>\n          <Plus className='font-medium-1 me-50' />\n          <span className='align-middle'>{data.label}</span>\n        </Button>\n      )\n    } else {\n      return <components.Option {...props}> {data.label} </components.Option>\n    }\n  }\n\n  return (\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Card className='invoice-preview-card'>\n        {/* Header */}\n        <CardBody className='pb-2 px-2'>\n          <Row>\n            <div className='col-lg-6 col-sm-12'>\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='clientId'>\n                  Client\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"clientId\"\n                    id=\"clientId\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.clientId })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={clientOptions}\n                        value={clientOptions.find(c => { return c.id === value })}\n                        onChange={val => { field.onChange(val.id); getClientData(val.id) }}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.clientId && <FormFeedback className='text-danger'>{errors.clientId?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='serviceId'>\n                  Service\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"serviceId\"\n                    id=\"serviceId\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.serviceId })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={serviceOptions}\n                        value={serviceOptions.find(c => { return c.id === value })}\n                        onChange={val => field.onChange(val.id)}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.serviceId && <FormFeedback className='text-danger'>{errors.serviceId?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='description'>\n                  Description\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    id='description'\n                    name='description'\n                    control={control}\n                    render={({ field }) => <Input type=\"textarea\" invalid={errors.description && true} {...field} />}\n                  />\n                  {errors.description && <FormFeedback>{errors.description.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='my-2'>\n                <Col>\n                  <div className='d-lg-flex'>\n                    <input type='file' className='hidden' multiple onChange={changeHandler} ref={inputRef} />\n                    <Button type='button' outline color='primary' onClick={() => inputRef.current.click()}>\n                      <Plus size={14} className='me-25'></Plus> Add Attachment</Button>\n                  </div>\n                </Col>\n              </Row>\n            </div>\n            <div className='col-lg-6 col-sm-12'>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='assignee'>\n                  Assignee\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"assignee\"\n                    id=\"assignee\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.assignee })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={assigneeUserOptions}\n                        isMulti={true}\n                        value={value} // set selected values\n                        onChange={handleAssigneeChange}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.assignee && <FormFeedback className='text-danger'>{errors.assignee?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='reviewer'>\n                  Reviewer\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"reviewer\"\n                    id=\"reviewer\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.reviewer })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={reviewerUserOptions}\n                        isMulti={true}\n                        value={value} // set selected values\n                        onChange={handleReviwerChange}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.reviewer && <FormFeedback className='text-danger'>{errors.reviewer?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='startDate'>\n                  Start Date\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    value={date}\n                    name=\"startDate\"\n                    control={control}\n                    rules={{ required: true }}\n                    options={{ dateFormat: \"d-m-Y\" }}\n                    render={({ field }) => (\n                      <Flatpickr\n                        value={field.value}\n                        onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                        options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                        className='form-control due-date-picker' />\n                    )}\n                  />\n\n                  {errors.startDate && <FormFeedback className='text-danger'>{errors.startDate?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='endDate'>\n                  End Date\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    value={date}\n                    onChange={date => setDate(date)}\n                    name=\"endDate\"\n                    control={control}\n                    rules={{ required: true }}\n                    options={{ dateFormat: \"d-m-Y\" }}\n                    render={({ field }) => (\n                      <Flatpickr\n                        value={field.value}\n                        onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                        options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                        className='form-control due-date-picker' />\n                    )}\n                  />\n\n                  {errors.endDate && <FormFeedback className='text-danger'>{errors.endDate?.message}</FormFeedback>}\n                </Col>\n              </Row>\n\n              <Row className='mb-1'>\n                <Label sm='3' size='lg' className='form-label' for='priority'>\n                  Priority\n                </Label>\n                <Col sm='9'>\n                  <Controller\n                    control={control}\n                    name=\"priority\"\n                    id=\"priority\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.priority })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={priorityOptions}\n                        value={priorityOptions.find(c => { return c.id === value })}\n                        onChange={val => field.onChange(val.id)}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n\n                  />\n                  {errors.priority && <FormFeedback className='text-danger'>{errors.priority?.message}</FormFeedback>}\n                </Col>\n              </Row>\n            </div>\n          </Row>\n        </CardBody>\n        <hr className='invoice-spacing' />\n        <Row className='px-1 pb-2'>\n          <div className='form-check form-check-primary mx-2'>\n            <Controller\n              control={control}\n              name={`invoiceFlag`}\n              rules={{ required: true }}\n              render={({ field }) => (\n                <Input className='form-check-input' type='checkbox' id='invoice_flag' {...field} onChange={() => setinvoiceFlag(!invoiceFlag)} />\n              )}\n            />\n            <Label className='form-check-label' for='invoice_flag'>\n              Create Proposal for this Task\n            </Label>\n          </div>\n        </Row>\n        {invoiceFlag && (\n          <CardBody className='invoice-padding invoice-product-details'>\n            {fields.map((item, i) => (\n\n              <div key={item.rowid} className='repeater-wrapper'>\n                <Row>\n                  <Col className='d-lg-flex product-details-border position-relative pe-0 ps-sm-0' sm='12'>\n                    <Row className='w-100 pe-lg-0 py-2 ms-sm-1'>\n                      <Col className='my-lg-0 my-2' lg='4' sm='12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Item</CardText>\n                        <Controller\n                          control={control}\n                          name={`invoice_items.${i}.itemId`}\n                          rules={{ required: true }}\n                          render={({ field, value, ref }) => (\n                            <Select\n                              inputRef={ref}\n                              className={classnames('react-select', { 'is-invalid': errors.invoice_items?.[i]?.itemId })}\n                              classNamePrefix='select'\n                              options={serviceOptions}\n                              value={serviceOptions.find(c => c.id === value)}\n                              onChange={val => field.onChange(val.id)}\n                              getOptionLabel={(option) => option.name}\n                              getOptionValue={(option) => option.id}\n                            />\n                          )}\n                        />\n                        {errors.invoice_items?.[i]?.itemId && <FormFeedback className='text-danger'>{errors.invoice_items?.[i]?.itemId?.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                        <CardText className='col-title mb-md-2 mb-0'>SAC Code</CardText>\n\n                        <Controller\n                          name={`invoice_items.${i}.sac_code`}\n                          control={control}\n                          render={({ field }) => <Input type=\"text\" invalid={errors.invoice_items?.[i]?.sac_code && true} {...field} />}\n                        />\n                        {errors.invoice_items?.[i]?.sac_code && <FormFeedback>{errors.invoice_items?.[i]?.sac_code?.message}</FormFeedback>}\n\n\n                      </Col>\n                      <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                        <CardText className='col-title mb-md-2 mb-0'>Price</CardText>\n                        <Controller\n                          name={`invoice_items.${i}.price`}\n                          control={control}\n                          render={({ field }) => <Input type=\"number\" invalid={errors.invoice_items?.[i]?.price && true} {...field} />}\n                        />\n                        {errors.invoice_items?.[i]?.price && <FormFeedback>{errors.invoice_items?.[i]?.price?.message}</FormFeedback>}\n\n                      </Col>\n                      <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Tax Rate</CardText>\n                        <Controller\n                          control={control}\n                          name={`invoice_items.${i}.tax_group_id`}\n                          rules={{ required: true }}\n                          render={({ field, value, ref }) => (\n                            <Select\n                              inputRef={ref}\n                              className={classnames('react-select', { 'is-invalid': errors.invoice_items?.[i]?.tax_group_id })}\n                              classNamePrefix='select'\n                              options={taxGroupOptions}\n                              value={taxGroupOptions.find(c => c.id === value)}\n                              onChange={val => field.onChange(val.id)}\n                              getOptionLabel={(option) => option.name}\n                              getOptionValue={(option) => option.id}\n                            />\n                          )}\n                        />\n                        {errors.invoice_items?.[i]?.tax_group_id && <FormFeedback className='text-danger'>{errors.invoice_items?.[i]?.tax_group_id?.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Amount</CardText>\n\n                      </Col>\n                    </Row>\n                    <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                      <X size={18} className='cursor-pointer' onClick={() => removeItem(i)} />\n                    </div>\n                  </Col>\n                </Row>\n              </div>\n            ))}\n            <Row className='mt-1'>\n              <Col sm='12' className='px-0'>\n                <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                  <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                </Button>\n              </Col>\n            </Row>\n          </CardBody>\n        )}\n      </Card>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button className='add-new-user' outline color='warning' tag={Link} to='/task/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"submit\" >\n              Save\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </form >\n  )\n}\n\nexport default AddCard\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst TaskAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <AddCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default TaskAdd\n","export const activeOrganizationid = () => {\n    return localStorage.getItem('activeOrganization') === null ? null : JSON.parse(localStorage.getItem('activeOrganization'))['id']\n}\n\nexport const activeOrganization = () => {\n    return localStorage.getItem('activeOrganization') === null ? null : JSON.parse(localStorage.getItem('activeOrganization'))\n}\n\nexport const loggedInUser = () => { \n    return localStorage.getItem('userData') === null ? null : JSON.parse(localStorage.getItem('userData'))\n}"],"sourceRoot":""}
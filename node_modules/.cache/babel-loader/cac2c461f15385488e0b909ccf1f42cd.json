{"ast":null,"code":"var _jsxFileName = \"/var/www/html/Turia_Client_React/src/router/routes/index.js\";\n// ** React Imports\nimport { Fragment } from 'react'; // ** Routes Imports\n\nimport AppRoutes from './Apps';\nimport FormRoutes from './Forms';\nimport PagesRoutes from './Pages';\nimport TablesRoutes from './Tables';\nimport ChartsRoutes from './Charts';\nimport DashboardRoutes from './Dashboards';\nimport UiElementRoutes from './UiElements';\nimport ExtensionsRoutes from './Extensions';\nimport PageLayoutsRoutes from './PageLayouts';\nimport AuthenticationRoutes from './Authentication'; // ** Layouts\n\nimport BlankLayout from '@layouts/BlankLayout';\nimport VerticalLayout from '@src/layouts/VerticalLayout';\nimport HorizontalLayout from '@src/layouts/HorizontalLayout';\nimport LayoutWrapper from '@src/@core/layouts/components/layout-wrapper'; // ** Route Components\n\nimport PublicRoute from '@components/routes/PublicRoute';\nimport PrivateRoute from '@components/routes/PrivateRoute'; // ** Utils\n\nimport { isObjEmpty } from '@utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getLayout = {\n  blank: /*#__PURE__*/_jsxDEV(BlankLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 10\n  }, this),\n  vertical: /*#__PURE__*/_jsxDEV(VerticalLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 13\n  }, this),\n  horizontal: /*#__PURE__*/_jsxDEV(HorizontalLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 15\n  }, this)\n}; // ** Document title\n\nconst TemplateTitle = '%s - Vuexy React Admin Template'; // ** Default Route\n\nconst DefaultRoute = '/dashboard/ecommerce'; // ** Merge Routes\n\nconst Routes = [...AuthenticationRoutes, ...DashboardRoutes, ...AppRoutes, ...PagesRoutes, ...UiElementRoutes, ...ExtensionsRoutes, ...PageLayoutsRoutes, ...FormRoutes, ...TablesRoutes, ...ChartsRoutes];\n\nconst getRouteMeta = route => {\n  if (isObjEmpty(route.element.props)) {\n    if (route.meta) {\n      return {\n        routeMeta: route.meta\n      };\n    } else {\n      return {};\n    }\n  }\n}; // ** Return Filtered Array of Routes & Paths\n\n\nconst MergeLayoutRoutes = (layout, defaultLayout) => {\n  const LayoutRoutes = [];\n\n  if (Routes) {\n    Routes.filter(route => {\n      let isBlank = false; // ** Checks if Route layout or Default layout matches current layout\n\n      if (route.meta && route.meta.layout && route.meta.layout === layout || (route.meta === undefined || route.meta.layout === undefined) && defaultLayout === layout) {\n        let RouteTag = PrivateRoute; // ** Check for public or private route\n\n        if (route.meta) {\n          route.meta.layout === 'blank' ? isBlank = true : isBlank = false;\n          RouteTag = route.meta.publicRoute ? PublicRoute : PrivateRoute;\n        }\n\n        if (route.element) {\n          const Wrapper = // eslint-disable-next-line multiline-ternary\n          isObjEmpty(route.element.props) && isBlank === false ? // eslint-disable-next-line multiline-ternary\n          LayoutWrapper : Fragment;\n          route.element = /*#__PURE__*/_jsxDEV(Wrapper, { ...(isBlank === false ? getRouteMeta(route) : {}),\n            children: /*#__PURE__*/_jsxDEV(RouteTag, {\n              route: route,\n              children: route.element\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this);\n        } // Push route to LayoutRoutes\n\n\n        LayoutRoutes.push(route);\n      }\n\n      return LayoutRoutes;\n    });\n  }\n\n  return LayoutRoutes;\n};\n\n_c = MergeLayoutRoutes;\n\nconst getRoutes = layout => {\n  const defaultLayout = layout || 'vertical';\n  const layouts = ['vertical', 'horizontal', 'blank'];\n  const AllRoutes = [];\n  layouts.forEach(layoutItem => {\n    const LayoutRoutes = MergeLayoutRoutes(layoutItem, defaultLayout);\n    AllRoutes.push({\n      path: '/',\n      element: getLayout[layoutItem] || getLayout[defaultLayout],\n      children: LayoutRoutes\n    });\n  });\n  return AllRoutes;\n};\n\nexport { DefaultRoute, TemplateTitle, Routes, getRoutes };\n\nvar _c;\n\n$RefreshReg$(_c, \"MergeLayoutRoutes\");","map":{"version":3,"names":["Fragment","AppRoutes","FormRoutes","PagesRoutes","TablesRoutes","ChartsRoutes","DashboardRoutes","UiElementRoutes","ExtensionsRoutes","PageLayoutsRoutes","AuthenticationRoutes","BlankLayout","VerticalLayout","HorizontalLayout","LayoutWrapper","PublicRoute","PrivateRoute","isObjEmpty","getLayout","blank","vertical","horizontal","TemplateTitle","DefaultRoute","Routes","getRouteMeta","route","element","props","meta","routeMeta","MergeLayoutRoutes","layout","defaultLayout","LayoutRoutes","filter","isBlank","undefined","RouteTag","publicRoute","Wrapper","push","getRoutes","layouts","AllRoutes","forEach","layoutItem","path","children"],"sources":["/var/www/html/Turia_Client_React/src/router/routes/index.js"],"sourcesContent":["// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Routes Imports\nimport AppRoutes from './Apps'\nimport FormRoutes from './Forms'\nimport PagesRoutes from './Pages'\nimport TablesRoutes from './Tables'\nimport ChartsRoutes from './Charts'\nimport DashboardRoutes from './Dashboards'\nimport UiElementRoutes from './UiElements'\nimport ExtensionsRoutes from './Extensions'\nimport PageLayoutsRoutes from './PageLayouts'\nimport AuthenticationRoutes from './Authentication'\n\n// ** Layouts\nimport BlankLayout from '@layouts/BlankLayout'\nimport VerticalLayout from '@src/layouts/VerticalLayout'\nimport HorizontalLayout from '@src/layouts/HorizontalLayout'\nimport LayoutWrapper from '@src/@core/layouts/components/layout-wrapper'\n\n// ** Route Components\nimport PublicRoute from '@components/routes/PublicRoute'\nimport PrivateRoute from '@components/routes/PrivateRoute'\n\n// ** Utils\nimport { isObjEmpty } from '@utils'\n\nconst getLayout = {\n  blank: <BlankLayout />,\n  vertical: <VerticalLayout />,\n  horizontal: <HorizontalLayout />\n}\n\n// ** Document title\nconst TemplateTitle = '%s - Vuexy React Admin Template'\n\n// ** Default Route\nconst DefaultRoute = '/dashboard/ecommerce'\n\n// ** Merge Routes\nconst Routes = [\n  ...AuthenticationRoutes,\n  ...DashboardRoutes,\n  ...AppRoutes,\n  ...PagesRoutes,\n  ...UiElementRoutes,\n  ...ExtensionsRoutes,\n  ...PageLayoutsRoutes,\n  ...FormRoutes,\n  ...TablesRoutes,\n  ...ChartsRoutes\n]\n\nconst getRouteMeta = route => {\n  if (isObjEmpty(route.element.props)) {\n    if (route.meta) {\n      return { routeMeta: route.meta }\n    } else {\n      return {}\n    }\n  }\n}\n\n// ** Return Filtered Array of Routes & Paths\nconst MergeLayoutRoutes = (layout, defaultLayout) => {\n  const LayoutRoutes = []\n\n  if (Routes) {\n    Routes.filter(route => {\n      let isBlank = false\n      // ** Checks if Route layout or Default layout matches current layout\n      if (\n        (route.meta && route.meta.layout && route.meta.layout === layout) ||\n        ((route.meta === undefined || route.meta.layout === undefined) && defaultLayout === layout)\n      ) {\n        let RouteTag = PrivateRoute\n\n        // ** Check for public or private route\n        if (route.meta) {\n          route.meta.layout === 'blank' ? (isBlank = true) : (isBlank = false)\n          RouteTag = route.meta.publicRoute ? PublicRoute : PrivateRoute\n        }\n        if (route.element) {\n          const Wrapper =\n            // eslint-disable-next-line multiline-ternary\n            isObjEmpty(route.element.props) && isBlank === false\n              ? // eslint-disable-next-line multiline-ternary\n                LayoutWrapper\n              : Fragment\n\n          route.element = (\n            <Wrapper {...(isBlank === false ? getRouteMeta(route) : {})}>\n              <RouteTag route={route}>{route.element}</RouteTag>\n            </Wrapper>\n          )\n        }\n\n        // Push route to LayoutRoutes\n        LayoutRoutes.push(route)\n      }\n      return LayoutRoutes\n    })\n  }\n  return LayoutRoutes\n}\n\nconst getRoutes = layout => {\n  const defaultLayout = layout || 'vertical'\n  const layouts = ['vertical', 'horizontal', 'blank']\n\n  const AllRoutes = []\n\n  layouts.forEach(layoutItem => {\n    const LayoutRoutes = MergeLayoutRoutes(layoutItem, defaultLayout)\n\n    AllRoutes.push({\n      path: '/',\n      element: getLayout[layoutItem] || getLayout[defaultLayout],\n      children: LayoutRoutes\n    })\n  })\n  return AllRoutes\n}\n\nexport { DefaultRoute, TemplateTitle, Routes, getRoutes }\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
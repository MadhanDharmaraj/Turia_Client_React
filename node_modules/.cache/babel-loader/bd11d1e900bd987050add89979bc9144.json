{"ast":null,"code":"var _jsxFileName = \"/var/www/html/Turia_Client_React/src/@core/components/card-actions/index.js\",\n    _s = $RefreshSig$();\n\n// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'; // ** Third Party Components\n\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport UiLoader from '@components/ui-loader';\nimport { ChevronDown, RotateCw, X } from 'react-feather'; // ** Reactstrap Imports\n\nimport { Card, CardHeader, CardTitle, Collapse } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardActions = props => {\n  _s();\n\n  // ** Props\n  const {\n    title,\n    actions,\n    children,\n    collapseIcon,\n    reloadIcon,\n    removeIcon,\n    endReload\n  } = props; // ** States\n\n  const [reload, setReload] = useState(false);\n  const [collapse, setCollapse] = useState(true);\n  const [visibility, setVisibility] = useState(true);\n  /**\n   ** If custom icon is defined then consider that else default icons\n   */\n\n  const Icons = {\n    collapse: collapseIcon ? collapseIcon : ChevronDown,\n    remove: removeIcon ? removeIcon : X,\n    reload: reloadIcon ? reloadIcon : RotateCw\n  }; // ** Action to call\n\n  const callAction = action => {\n    switch (action) {\n      case 'collapse':\n        return setCollapse(!collapse);\n\n      case 'remove':\n        return setVisibility(false);\n\n      case 'reload':\n        return setReload(true);\n\n      default:\n    }\n  }; // ** Renders card actions\n\n\n  const renderIcons = () => {\n    /**\n     ** IF: user passes array of actions then loop through them & render all of the actions\n     ** ELSE: render single action\n     */\n    if (Array.isArray(actions)) {\n      return actions.map((action, i) => {\n        const Tag = Icons[action];\n        return /*#__PURE__*/_jsxDEV(Tag, {\n          className: classnames('cursor-pointer', {\n            'me-50': i < actions.length - 1\n          }),\n          size: 15,\n          onClick: () => callAction(action)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this);\n      });\n    } else {\n      const Tag = Icons[actions];\n      return /*#__PURE__*/_jsxDEV(Tag, {\n        className: \"cursor-pointer\",\n        size: 15,\n        onClick: () => callAction(actions)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 14\n      }, this);\n    }\n  }; // ** Ends reload\n\n\n  const removeReload = () => {\n    setReload(false);\n  }; // ** If user passes endReload function call it.\n\n\n  useEffect(() => {\n    if (reload) {\n      endReload(removeReload);\n    }\n  }); // ** If user passes collapse action then return <Collapse> as Wrapper else return <Fragment>\n\n  const CollapseWrapper = actions === 'collapse' || actions.includes('collapse') ? Collapse : Fragment; // ** If user passes reload action then return <BlockUi> as Wrapper else return <Fragment>\n\n  const BlockUiWrapper = actions === 'reload' || actions.includes('reload') ? UiLoader : Fragment;\n  return /*#__PURE__*/_jsxDEV(BlockUiWrapper\n  /*eslint-disable */\n  , { ...(actions === 'reload' || actions.includes('reload') ? {\n      blocking: reload\n    } : {}),\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: classnames('card-action', {\n        'd-none': !visibility\n      }),\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          tag: \"h4\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-icons\",\n          children: renderIcons()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CollapseWrapper, { ...(actions === 'collapse' || actions.includes('collapse') ? {\n          isOpen: collapse\n        } : {}),\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CardActions, \"H34FB3UQW6V15UpRvUt3rdzmeXw=\");\n\n_c = CardActions;\nexport default CardActions; // ** PropTypes\n\nCardActions.propTypes = {\n  removeIcon: PropTypes.any,\n  reloadIcon: PropTypes.any,\n  collapseIcon: PropTypes.any,\n  title: PropTypes.string.isRequired,\n  actions: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,\n\n  endReload(props) {\n    // ** User passes reload action and doesn't pass endReload then return Error\n    if (props['actions'] === 'reload' && props['endReload'] === undefined || props['actions'].includes('reload') && props['endReload'] === undefined) {\n      return new Error('Please provide a function to end reload!');\n    }\n  }\n\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"CardActions\");","map":{"version":3,"names":["Fragment","useState","useEffect","PropTypes","classnames","UiLoader","ChevronDown","RotateCw","X","Card","CardHeader","CardTitle","Collapse","CardActions","props","title","actions","children","collapseIcon","reloadIcon","removeIcon","endReload","reload","setReload","collapse","setCollapse","visibility","setVisibility","Icons","remove","callAction","action","renderIcons","Array","isArray","map","i","Tag","length","removeReload","CollapseWrapper","includes","BlockUiWrapper","blocking","isOpen","propTypes","any","string","isRequired","oneOfType","arrayOf","undefined","Error"],"sources":["/var/www/html/Turia_Client_React/src/@core/components/card-actions/index.js"],"sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport UiLoader from '@components/ui-loader'\nimport { ChevronDown, RotateCw, X } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardTitle, Collapse } from 'reactstrap'\n\nconst CardActions = props => {\n  // ** Props\n  const { title, actions, children, collapseIcon, reloadIcon, removeIcon, endReload } = props\n\n  // ** States\n  const [reload, setReload] = useState(false)\n  const [collapse, setCollapse] = useState(true)\n  const [visibility, setVisibility] = useState(true)\n\n  /**\n   ** If custom icon is defined then consider that else default icons\n   */\n  const Icons = {\n    collapse: collapseIcon ? collapseIcon : ChevronDown,\n    remove: removeIcon ? removeIcon : X,\n    reload: reloadIcon ? reloadIcon : RotateCw\n  }\n\n  // ** Action to call\n  const callAction = action => {\n    switch (action) {\n      case 'collapse':\n        return setCollapse(!collapse)\n      case 'remove':\n        return setVisibility(false)\n      case 'reload':\n        return setReload(true)\n      default:\n    }\n  }\n\n  // ** Renders card actions\n  const renderIcons = () => {\n    /**\n     ** IF: user passes array of actions then loop through them & render all of the actions\n     ** ELSE: render single action\n     */\n\n    if (Array.isArray(actions)) {\n      return actions.map((action, i) => {\n        const Tag = Icons[action]\n        return (\n          <Tag\n            key={i}\n            className={classnames('cursor-pointer', {\n              'me-50': i < actions.length - 1\n            })}\n            size={15}\n            onClick={() => callAction(action)}\n          />\n        )\n      })\n    } else {\n      const Tag = Icons[actions]\n      return <Tag className='cursor-pointer' size={15} onClick={() => callAction(actions)} />\n    }\n  }\n\n  // ** Ends reload\n  const removeReload = () => {\n    setReload(false)\n  }\n\n  // ** If user passes endReload function call it.\n  useEffect(() => {\n    if (reload) {\n      endReload(removeReload)\n    }\n  })\n\n  // ** If user passes collapse action then return <Collapse> as Wrapper else return <Fragment>\n  const CollapseWrapper = actions === 'collapse' || actions.includes('collapse') ? Collapse : Fragment\n\n  // ** If user passes reload action then return <BlockUi> as Wrapper else return <Fragment>\n  const BlockUiWrapper = actions === 'reload' || actions.includes('reload') ? UiLoader : Fragment\n\n  return (\n    <BlockUiWrapper\n      /*eslint-disable */\n      {...(actions === 'reload' || actions.includes('reload')\n        ? {\n            blocking: reload\n          }\n        : {})}\n      /*eslint-enable */\n    >\n      <Card\n        className={classnames('card-action', {\n          'd-none': !visibility\n        })}\n      >\n        <CardHeader>\n          <CardTitle tag='h4'>{title}</CardTitle>\n          <div className='action-icons'>{renderIcons()}</div>\n        </CardHeader>\n        <CollapseWrapper {...(actions === 'collapse' || actions.includes('collapse') ? { isOpen: collapse } : {})}>\n          {children}\n        </CollapseWrapper>\n      </Card>\n    </BlockUiWrapper>\n  )\n}\n\nexport default CardActions\n\n// ** PropTypes\nCardActions.propTypes = {\n  removeIcon: PropTypes.any,\n  reloadIcon: PropTypes.any,\n  collapseIcon: PropTypes.any,\n  title: PropTypes.string.isRequired,\n  actions: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,\n  endReload(props) {\n    // ** User passes reload action and doesn't pass endReload then return Error\n    if (\n      (props['actions'] === 'reload' && props['endReload'] === undefined) ||\n      (props['actions'].includes('reload') && props['endReload'] === undefined)\n    ) {\n      return new Error('Please provide a function to end reload!')\n    }\n  }\n}\n"],"mappings":";;;AAAA;AACA,SAASA,QAAT,EAAmBC,QAAnB,EAA6BC,SAA7B,QAA8C,OAA9C,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,WAAT,EAAsBC,QAAtB,EAAgCC,CAAhC,QAAyC,eAAzC,C,CAEA;;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,YAAtD;;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;EAAA;;EAC3B;EACA,MAAM;IAAEC,KAAF;IAASC,OAAT;IAAkBC,QAAlB;IAA4BC,YAA5B;IAA0CC,UAA1C;IAAsDC,UAAtD;IAAkEC;EAAlE,IAAgFP,KAAtF,CAF2B,CAI3B;;EACA,MAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBtB,QAAQ,CAAC,KAAD,CAApC;EACA,MAAM,CAACuB,QAAD,EAAWC,WAAX,IAA0BxB,QAAQ,CAAC,IAAD,CAAxC;EACA,MAAM,CAACyB,UAAD,EAAaC,aAAb,IAA8B1B,QAAQ,CAAC,IAAD,CAA5C;EAEA;AACF;AACA;;EACE,MAAM2B,KAAK,GAAG;IACZJ,QAAQ,EAAEN,YAAY,GAAGA,YAAH,GAAkBZ,WAD5B;IAEZuB,MAAM,EAAET,UAAU,GAAGA,UAAH,GAAgBZ,CAFtB;IAGZc,MAAM,EAAEH,UAAU,GAAGA,UAAH,GAAgBZ;EAHtB,CAAd,CAZ2B,CAkB3B;;EACA,MAAMuB,UAAU,GAAGC,MAAM,IAAI;IAC3B,QAAQA,MAAR;MACE,KAAK,UAAL;QACE,OAAON,WAAW,CAAC,CAACD,QAAF,CAAlB;;MACF,KAAK,QAAL;QACE,OAAOG,aAAa,CAAC,KAAD,CAApB;;MACF,KAAK,QAAL;QACE,OAAOJ,SAAS,CAAC,IAAD,CAAhB;;MACF;IAPF;EASD,CAVD,CAnB2B,CA+B3B;;;EACA,MAAMS,WAAW,GAAG,MAAM;IACxB;AACJ;AACA;AACA;IAEI,IAAIC,KAAK,CAACC,OAAN,CAAclB,OAAd,CAAJ,EAA4B;MAC1B,OAAOA,OAAO,CAACmB,GAAR,CAAY,CAACJ,MAAD,EAASK,CAAT,KAAe;QAChC,MAAMC,GAAG,GAAGT,KAAK,CAACG,MAAD,CAAjB;QACA,oBACE,QAAC,GAAD;UAEE,SAAS,EAAE3B,UAAU,CAAC,gBAAD,EAAmB;YACtC,SAASgC,CAAC,GAAGpB,OAAO,CAACsB,MAAR,GAAiB;UADQ,CAAnB,CAFvB;UAKE,IAAI,EAAE,EALR;UAME,OAAO,EAAE,MAAMR,UAAU,CAACC,MAAD;QAN3B,GACOK,CADP;UAAA;UAAA;UAAA;QAAA,QADF;MAUD,CAZM,CAAP;IAaD,CAdD,MAcO;MACL,MAAMC,GAAG,GAAGT,KAAK,CAACZ,OAAD,CAAjB;MACA,oBAAO,QAAC,GAAD;QAAK,SAAS,EAAC,gBAAf;QAAgC,IAAI,EAAE,EAAtC;QAA0C,OAAO,EAAE,MAAMc,UAAU,CAACd,OAAD;MAAnE;QAAA;QAAA;QAAA;MAAA,QAAP;IACD;EACF,CAxBD,CAhC2B,CA0D3B;;;EACA,MAAMuB,YAAY,GAAG,MAAM;IACzBhB,SAAS,CAAC,KAAD,CAAT;EACD,CAFD,CA3D2B,CA+D3B;;;EACArB,SAAS,CAAC,MAAM;IACd,IAAIoB,MAAJ,EAAY;MACVD,SAAS,CAACkB,YAAD,CAAT;IACD;EACF,CAJQ,CAAT,CAhE2B,CAsE3B;;EACA,MAAMC,eAAe,GAAGxB,OAAO,KAAK,UAAZ,IAA0BA,OAAO,CAACyB,QAAR,CAAiB,UAAjB,CAA1B,GAAyD7B,QAAzD,GAAoEZ,QAA5F,CAvE2B,CAyE3B;;EACA,MAAM0C,cAAc,GAAG1B,OAAO,KAAK,QAAZ,IAAwBA,OAAO,CAACyB,QAAR,CAAiB,QAAjB,CAAxB,GAAqDpC,QAArD,GAAgEL,QAAvF;EAEA,oBACE,QAAC;EACC;EADF,QAEOgB,OAAO,KAAK,QAAZ,IAAwBA,OAAO,CAACyB,QAAR,CAAiB,QAAjB,CAAxB,GACD;MACEE,QAAQ,EAAErB;IADZ,CADC,GAID,EANN;IAAA,uBASE,QAAC,IAAD;MACE,SAAS,EAAElB,UAAU,CAAC,aAAD,EAAgB;QACnC,UAAU,CAACsB;MADwB,CAAhB,CADvB;MAAA,wBAKE,QAAC,UAAD;QAAA,wBACE,QAAC,SAAD;UAAW,GAAG,EAAC,IAAf;UAAA,UAAqBX;QAArB;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAK,SAAS,EAAC,cAAf;UAAA,UAA+BiB,WAAW;QAA1C;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QALF,eASE,QAAC,eAAD,QAAsBhB,OAAO,KAAK,UAAZ,IAA0BA,OAAO,CAACyB,QAAR,CAAiB,UAAjB,CAA1B,GAAyD;UAAEG,MAAM,EAAEpB;QAAV,CAAzD,GAAgF,EAAtG;QAAA,UACGP;MADH;QAAA;QAAA;QAAA;MAAA,QATF;IAAA;MAAA;MAAA;MAAA;IAAA;EATF;IAAA;IAAA;IAAA;EAAA,QADF;AAyBD,CArGD;;GAAMJ,W;;KAAAA,W;AAuGN,eAAeA,WAAf,C,CAEA;;AACAA,WAAW,CAACgC,SAAZ,GAAwB;EACtBzB,UAAU,EAAEjB,SAAS,CAAC2C,GADA;EAEtB3B,UAAU,EAAEhB,SAAS,CAAC2C,GAFA;EAGtB5B,YAAY,EAAEf,SAAS,CAAC2C,GAHF;EAItB/B,KAAK,EAAEZ,SAAS,CAAC4C,MAAV,CAAiBC,UAJF;EAKtBhC,OAAO,EAAEb,SAAS,CAAC8C,SAAV,CAAoB,CAAC9C,SAAS,CAAC4C,MAAX,EAAmB5C,SAAS,CAAC+C,OAAV,CAAkB/C,SAAS,CAAC4C,MAA5B,CAAnB,CAApB,EAA6EC,UALhE;;EAMtB3B,SAAS,CAACP,KAAD,EAAQ;IACf;IACA,IACGA,KAAK,CAAC,SAAD,CAAL,KAAqB,QAArB,IAAiCA,KAAK,CAAC,WAAD,CAAL,KAAuBqC,SAAzD,IACCrC,KAAK,CAAC,SAAD,CAAL,CAAiB2B,QAAjB,CAA0B,QAA1B,KAAuC3B,KAAK,CAAC,WAAD,CAAL,KAAuBqC,SAFjE,EAGE;MACA,OAAO,IAAIC,KAAJ,CAAU,0CAAV,CAAP;IACD;EACF;;AAdqB,CAAxB"},"metadata":{},"sourceType":"module"}
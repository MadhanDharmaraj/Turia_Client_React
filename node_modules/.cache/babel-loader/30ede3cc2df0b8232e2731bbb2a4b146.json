{"ast":null,"code":"// ** React Imports\nimport{Fragment,useEffect}from'react';// ** Reactstrap Imports\nimport{Row,Col,CardText}from'reactstrap';// ** Third Party Components\nimport Prism from'prismjs';// ** Custom Components\nimport Card from'@components/card-snippet';import BreadCrumbs from'@components/breadcrumbs';// ** Demo Components\nimport TooltipPositions from'./TooltipPositions';import TooltipControlled from'./TooltipControlled';import TooltipUncontrolled from'./TooltipUncontrolled';// ** Source Code\nimport{tooltipControlled,tooltipUncontrolled,tooltipPosition}from'./TooltipSourceCode';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Tooltips=function Tooltips(){useEffect(function(){Prism.highlightAll();},[]);return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(BreadCrumbs,{title:\"Tooltips\",data:[{title:'Components'},{title:'Tooltips'}]}),/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Col,{xl:\"6\",lg:\"12\",children:/*#__PURE__*/_jsxs(Card,{title:\"Controlled Tooltip\",code:tooltipControlled,children:[/*#__PURE__*/_jsxs(CardText,{children:[\"For controlled tooltips you'll have to manage state of component.controlled tooltips require\",' ',/*#__PURE__*/_jsx(\"code\",{children:\"isOpen\"}),\" and \",/*#__PURE__*/_jsx(\"code\",{children:\"toggle\"}),\" props to work.\"]}),/*#__PURE__*/_jsx(TooltipControlled,{})]})}),/*#__PURE__*/_jsx(Col,{xl:\"6\",lg:\"12\",children:/*#__PURE__*/_jsxs(Card,{title:\"Uncontrolled Tooltip\",code:tooltipUncontrolled,children:[/*#__PURE__*/_jsxs(CardText,{children:[\"UncontrolledTooltip does not require \",/*#__PURE__*/_jsx(\"code\",{children:\"isOpen\"}),\" nor \",/*#__PURE__*/_jsx(\"code\",{children:\"toggle\"}),\" props to work.All you have to do is provide a valid target to tooltip.\"]}),/*#__PURE__*/_jsx(TooltipUncontrolled,{})]})})]}),/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsx(Col,{sm:\"12\",children:/*#__PURE__*/_jsxs(Card,{title:\"Tooltip Positions\",code:tooltipPosition,children:[/*#__PURE__*/_jsxs(CardText,{className:\"mb-0\",children:[\"Use prop \",/*#__PURE__*/_jsx(\"code\",{children:\"placement\"}),\" to change position of tooltip.\"]}),/*#__PURE__*/_jsx(TooltipPositions,{})]})})})]});};export default Tooltips;","map":{"version":3,"names":["Fragment","useEffect","Row","Col","CardText","Prism","Card","BreadCrumbs","TooltipPositions","TooltipControlled","TooltipUncontrolled","tooltipControlled","tooltipUncontrolled","tooltipPosition","Tooltips","highlightAll","title"],"sources":["/var/www/html/Turia_Client_React/src/views/components/tooltips/index.js"],"sourcesContent":["// ** React Imports\nimport { Fragment, useEffect } from 'react'\n\n// ** Reactstrap Imports\nimport { Row, Col, CardText } from 'reactstrap'\n\n// ** Third Party Components\nimport Prism from 'prismjs'\n\n// ** Custom Components\nimport Card from '@components/card-snippet'\nimport BreadCrumbs from '@components/breadcrumbs'\n\n// ** Demo Components\nimport TooltipPositions from './TooltipPositions'\nimport TooltipControlled from './TooltipControlled'\nimport TooltipUncontrolled from './TooltipUncontrolled'\n\n// ** Source Code\nimport { tooltipControlled, tooltipUncontrolled, tooltipPosition } from './TooltipSourceCode'\n\nconst Tooltips = () => {\n  useEffect(() => {\n    Prism.highlightAll()\n  }, [])\n\n  return (\n    <Fragment>\n      <BreadCrumbs title='Tooltips' data={[{ title: 'Components' }, { title: 'Tooltips' }]} />\n      <Row>\n        <Col xl='6' lg='12'>\n          <Card title='Controlled Tooltip' code={tooltipControlled}>\n            <CardText>\n              For controlled tooltips you'll have to manage state of component.controlled tooltips require{' '}\n              <code>isOpen</code> and <code>toggle</code> props to work.\n            </CardText>\n            <TooltipControlled />\n          </Card>\n        </Col>\n        <Col xl='6' lg='12'>\n          <Card title='Uncontrolled Tooltip' code={tooltipUncontrolled}>\n            <CardText>\n              UncontrolledTooltip does not require <code>isOpen</code> nor <code>toggle</code> props to work.All you\n              have to do is provide a valid target to tooltip.\n            </CardText>\n            <TooltipUncontrolled />\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm='12'>\n          <Card title='Tooltip Positions' code={tooltipPosition}>\n            <CardText className='mb-0'>\n              Use prop <code>placement</code> to change position of tooltip.\n            </CardText>\n            <TooltipPositions />\n          </Card>\n        </Col>\n      </Row>\n    </Fragment>\n  )\n}\nexport default Tooltips\n"],"mappings":"AAAA;AACA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA;AACA,OAASC,GAAT,CAAcC,GAAd,CAAmBC,QAAnB,KAAmC,YAAnC,CAEA;AACA,MAAOC,MAAP,KAAkB,SAAlB,CAEA;AACA,MAAOC,KAAP,KAAiB,0BAAjB,CACA,MAAOC,YAAP,KAAwB,yBAAxB,CAEA;AACA,MAAOC,iBAAP,KAA6B,oBAA7B,CACA,MAAOC,kBAAP,KAA8B,qBAA9B,CACA,MAAOC,oBAAP,KAAgC,uBAAhC,CAEA;AACA,OAASC,iBAAT,CAA4BC,mBAA5B,CAAiDC,eAAjD,KAAwE,qBAAxE,C,wFAEA,GAAMC,SAAQ,CAAG,QAAXA,SAAW,EAAM,CACrBb,SAAS,CAAC,UAAM,CACdI,KAAK,CAACU,YAAN,GACD,CAFQ,CAEN,EAFM,CAAT,CAIA,mBACE,MAAC,QAAD,yBACE,KAAC,WAAD,EAAa,KAAK,CAAC,UAAnB,CAA8B,IAAI,CAAE,CAAC,CAAEC,KAAK,CAAE,YAAT,CAAD,CAA0B,CAAEA,KAAK,CAAE,UAAT,CAA1B,CAApC,EADF,cAEE,MAAC,GAAD,yBACE,KAAC,GAAD,EAAK,EAAE,CAAC,GAAR,CAAY,EAAE,CAAC,IAAf,uBACE,MAAC,IAAD,EAAM,KAAK,CAAC,oBAAZ,CAAiC,IAAI,CAAEL,iBAAvC,wBACE,MAAC,QAAD,2GAC+F,GAD/F,cAEE,gCAFF,sBAE0B,gCAF1B,qBADF,cAKE,KAAC,iBAAD,IALF,GADF,EADF,cAUE,KAAC,GAAD,EAAK,EAAE,CAAC,GAAR,CAAY,EAAE,CAAC,IAAf,uBACE,MAAC,IAAD,EAAM,KAAK,CAAC,sBAAZ,CAAmC,IAAI,CAAEC,mBAAzC,wBACE,MAAC,QAAD,iEACuC,gCADvC,sBAC+D,gCAD/D,6EADF,cAKE,KAAC,mBAAD,IALF,GADF,EAVF,GAFF,cAsBE,KAAC,GAAD,wBACE,KAAC,GAAD,EAAK,EAAE,CAAC,IAAR,uBACE,MAAC,IAAD,EAAM,KAAK,CAAC,mBAAZ,CAAgC,IAAI,CAAEC,eAAtC,wBACE,MAAC,QAAD,EAAU,SAAS,CAAC,MAApB,oCACW,mCADX,qCADF,cAIE,KAAC,gBAAD,IAJF,GADF,EADF,EAtBF,GADF,CAmCD,CAxCD,CAyCA,cAAeC,SAAf"},"metadata":{},"sourceType":"module"}
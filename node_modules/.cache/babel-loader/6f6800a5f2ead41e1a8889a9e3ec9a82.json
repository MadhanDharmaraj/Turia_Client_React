{"ast":null,"code":"import axios from 'axios';\nimport jwtDefaultConfig from './jwtDefaultConfig';\nexport default class JwtService {\n  // ** jwtConfig <= Will be used by this service\n  // ** For Refreshing Token\n  // ** For Refreshing Token\n  constructor(jwtOverrideConfig) {\n    this.jwtConfig = { ...jwtDefaultConfig\n    };\n    this.isAlreadyFetchingAccessToken = false;\n    this.subscribers = [];\n    this.jwtConfig = { ...this.jwtConfig,\n      ...jwtOverrideConfig\n    }; // ** Request Interceptor\n\n    axios.interceptors.request.use(config => {\n      // ** Get token from localStorage\n      const accessToken = this.getToken(); // ** If token is present add it to request's Authorization Header\n\n      if (accessToken) {\n        // ** eslint-disable-next-line no-param-reassign\n        config.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`;\n      }\n\n      return config;\n    }, error => Promise.reject(error)); // ** Add request/response interceptor\n\n    axios.interceptors.response.use(response => response, error => {\n      // ** const { config, response: { status } } = error\n      const {\n        config,\n        response\n      } = error;\n      const originalRequest = config; // ** if (status === 401) {\n\n      if (response && response.status === 401) {\n        if (!this.isAlreadyFetchingAccessToken) {\n          this.isAlreadyFetchingAccessToken = true;\n          this.refreshToken().then(r => {\n            this.isAlreadyFetchingAccessToken = false; // ** Update accessToken in localStorage\n\n            this.setToken(r.data.accessToken);\n            this.setRefreshToken(r.data.refreshToken);\n            this.onAccessTokenFetched(r.data.accessToken);\n          });\n        }\n\n        const retryOriginalRequest = new Promise(resolve => {\n          this.addSubscriber(accessToken => {\n            // ** Make sure to assign accessToken according to your response.\n            // ** Check: https://pixinvent.ticksy.com/ticket/2413870\n            // ** Change Authorization header\n            originalRequest.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`;\n            resolve(this.axios(originalRequest));\n          });\n        });\n        return retryOriginalRequest;\n      }\n\n      return Promise.reject(error);\n    });\n  }\n\n  onAccessTokenFetched(accessToken) {\n    this.subscribers = this.subscribers.filter(callback => callback(accessToken));\n  }\n\n  addSubscriber(callback) {\n    this.subscribers.push(callback);\n  }\n\n  getToken() {\n    return localStorage.getItem(this.jwtConfig.storageTokenKeyName);\n  }\n\n  getRefreshToken() {\n    return localStorage.getItem(this.jwtConfig.storageRefreshTokenKeyName);\n  }\n\n  setToken(value) {\n    localStorage.setItem(this.jwtConfig.storageTokenKeyName, value);\n  }\n\n  setRefreshToken(value) {\n    localStorage.setItem(this.jwtConfig.storageRefreshTokenKeyName, value);\n  }\n\n  login() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return axios.post(this.jwtConfig.loginEndpoint, ...args);\n  }\n\n  register() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return axios.post(this.jwtConfig.registerEndpoint, ...args);\n  }\n\n  refreshToken() {\n    return axios.post(this.jwtConfig.refreshEndpoint, {\n      refreshToken: this.getRefreshToken()\n    });\n  }\n\n}","map":{"version":3,"names":["axios","jwtDefaultConfig","JwtService","constructor","jwtOverrideConfig","jwtConfig","isAlreadyFetchingAccessToken","subscribers","interceptors","request","use","config","accessToken","getToken","headers","Authorization","tokenType","error","Promise","reject","response","originalRequest","status","refreshToken","then","r","setToken","data","setRefreshToken","onAccessTokenFetched","retryOriginalRequest","resolve","addSubscriber","filter","callback","push","localStorage","getItem","storageTokenKeyName","getRefreshToken","storageRefreshTokenKeyName","value","setItem","login","args","post","loginEndpoint","register","registerEndpoint","refreshEndpoint"],"sources":["/var/www/html/Turia_Client_React/src/@core/auth/jwt/jwtService.js"],"sourcesContent":["import axios from 'axios'\nimport jwtDefaultConfig from './jwtDefaultConfig'\n\nexport default class JwtService {\n  // ** jwtConfig <= Will be used by this service\n  jwtConfig = { ...jwtDefaultConfig }\n\n  // ** For Refreshing Token\n  isAlreadyFetchingAccessToken = false\n\n  // ** For Refreshing Token\n  subscribers = []\n\n  constructor(jwtOverrideConfig) {\n    this.jwtConfig = { ...this.jwtConfig, ...jwtOverrideConfig }\n\n    // ** Request Interceptor\n    axios.interceptors.request.use(\n      config => {\n        // ** Get token from localStorage\n        const accessToken = this.getToken()\n\n        // ** If token is present add it to request's Authorization Header\n        if (accessToken) {\n          // ** eslint-disable-next-line no-param-reassign\n          config.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\n        }\n        return config\n      },\n      error => Promise.reject(error)\n    )\n\n    // ** Add request/response interceptor\n    axios.interceptors.response.use(\n      response => response,\n      error => {\n        // ** const { config, response: { status } } = error\n        const { config, response } = error\n        const originalRequest = config\n\n        // ** if (status === 401) {\n        if (response && response.status === 401) {\n          if (!this.isAlreadyFetchingAccessToken) {\n            this.isAlreadyFetchingAccessToken = true\n            this.refreshToken().then(r => {\n              this.isAlreadyFetchingAccessToken = false\n\n              // ** Update accessToken in localStorage\n              this.setToken(r.data.accessToken)\n              this.setRefreshToken(r.data.refreshToken)\n\n              this.onAccessTokenFetched(r.data.accessToken)\n            })\n          }\n          const retryOriginalRequest = new Promise(resolve => {\n            this.addSubscriber(accessToken => {\n              // ** Make sure to assign accessToken according to your response.\n              // ** Check: https://pixinvent.ticksy.com/ticket/2413870\n              // ** Change Authorization header\n              originalRequest.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\n              resolve(this.axios(originalRequest))\n            })\n          })\n          return retryOriginalRequest\n        }\n        return Promise.reject(error)\n      }\n    )\n  }\n\n  onAccessTokenFetched(accessToken) {\n    this.subscribers = this.subscribers.filter(callback => callback(accessToken))\n  }\n\n  addSubscriber(callback) {\n    this.subscribers.push(callback)\n  }\n\n  getToken() {\n    return localStorage.getItem(this.jwtConfig.storageTokenKeyName)\n  }\n\n  getRefreshToken() {\n    return localStorage.getItem(this.jwtConfig.storageRefreshTokenKeyName)\n  }\n\n  setToken(value) {\n    localStorage.setItem(this.jwtConfig.storageTokenKeyName, value)\n  }\n\n  setRefreshToken(value) {\n    localStorage.setItem(this.jwtConfig.storageRefreshTokenKeyName, value)\n  }\n\n  login(...args) {\n    return axios.post(this.jwtConfig.loginEndpoint, ...args)\n  }\n\n  register(...args) {\n    return axios.post(this.jwtConfig.registerEndpoint, ...args)\n  }\n\n  refreshToken() {\n    return axios.post(this.jwtConfig.refreshEndpoint, {\n      refreshToken: this.getRefreshToken()\n    })\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
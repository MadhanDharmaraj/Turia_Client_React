{"ast":null,"code":"var _s = $RefreshSig$();\n\n//** React Imports\nimport { useEffect } from 'react';\nexport const useOnClickOutside = (ref, handler) => {\n  _s();\n\n  useEffect(() => {\n    const listener = event => {\n      // ** Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      } // ** Call passed function on click outside\n\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, // ** Add ref and handler to effect dependencies\n  // ** It's worth noting that because passed in handler is a new ...\n  // ** ... function on every render that will cause this effect ...\n  // ** ... callback/cleanup to run every render. It's not a big deal ...\n  // ** ... but to optimize you can wrap handler in useCallback before ...\n  // ** ... passing it into this hook.\n  [ref, handler]);\n};\n\n_s(useOnClickOutside, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"names":["useEffect","useOnClickOutside","ref","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"sources":["/home/hp/Documents/Test/full-version/src/utility/hooks/useOnClickOutside.js"],"sourcesContent":["//** React Imports\nimport { useEffect } from 'react'\n\nexport const useOnClickOutside = (ref, handler) => {\n  useEffect(\n    () => {\n      const listener = event => {\n        // ** Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          return\n        }\n\n        // ** Call passed function on click outside\n        handler(event)\n      }\n\n      document.addEventListener('mousedown', listener)\n      document.addEventListener('touchstart', listener)\n\n      return () => {\n        document.removeEventListener('mousedown', listener)\n        document.removeEventListener('touchstart', listener)\n      }\n    },\n    // ** Add ref and handler to effect dependencies\n    // ** It's worth noting that because passed in handler is a new ...\n    // ** ... function on every render that will cause this effect ...\n    // ** ... callback/cleanup to run every render. It's not a big deal ...\n    // ** ... but to optimize you can wrap handler in useCallback before ...\n    // ** ... passing it into this hook.\n    [ref, handler]\n  )\n}\n"],"mappings":";;AAAA;AACA,SAASA,SAAT,QAA0B,OAA1B;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;EAAA;;EACjDH,SAAS,CACP,MAAM;IACJ,MAAMI,QAAQ,GAAGC,KAAK,IAAI;MACxB;MACA,IAAI,CAACH,GAAG,CAACI,OAAL,IAAgBJ,GAAG,CAACI,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAApB,EAAwD;QACtD;MACD,CAJuB,CAMxB;;;MACAL,OAAO,CAACE,KAAD,CAAP;IACD,CARD;;IAUAI,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCN,QAAvC;IACAK,QAAQ,CAACC,gBAAT,CAA0B,YAA1B,EAAwCN,QAAxC;IAEA,OAAO,MAAM;MACXK,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CP,QAA1C;MACAK,QAAQ,CAACE,mBAAT,CAA6B,YAA7B,EAA2CP,QAA3C;IACD,CAHD;EAID,CAnBM,EAoBP;EACA;EACA;EACA;EACA;EACA;EACA,CAACF,GAAD,EAAMC,OAAN,CA1BO,CAAT;AA4BD,CA7BM;;GAAMF,iB"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import mock from '../mock';\nimport jwt from 'jsonwebtoken';\nconst data = {\n  users: [{\n    id: 1,\n    fullName: 'John Doe',\n    username: 'johndoe',\n    password: 'admin',\n    avatar: require('@src/assets/images/portrait/small/avatar-s-11.jpg').default,\n    email: 'admin@demo.com',\n    role: 'admin',\n    ability: [{\n      action: 'manage',\n      subject: 'all'\n    }],\n    extras: {\n      eCommerceCartItemsCount: 5\n    }\n  }, {\n    id: 2,\n    fullName: 'Jane Doe',\n    username: 'janedoe',\n    password: 'client',\n    avatar: require('@src/assets/images/avatars/1-small.png').default,\n    email: 'client@demo.com',\n    role: 'client',\n    ability: [{\n      action: 'read',\n      subject: 'ACL'\n    }, {\n      action: 'read',\n      subject: 'Auth'\n    }],\n    extras: {\n      eCommerceCartItemsCount: 5\n    }\n  }]\n}; // ! These two secrets shall be in .env file and not in any other file\n\nconst jwtConfig = {\n  secret: 'dd5f3089-40c3-403d-af14-d0c228b05cb4',\n  refreshTokenSecret: '7c4c1c50-3230-45bf-9eae-c9b2e401c767',\n  expireTime: '10m',\n  refreshTokenExpireTime: '10m'\n};\nmock.onPost('/jwt/login').reply(request => {\n  const {\n    email,\n    password\n  } = JSON.parse(request.data);\n  let error = {\n    email: ['Something went wrong']\n  };\n  const user = data.users.find(u => u.email === email && u.password === password);\n\n  if (user) {\n    try {\n      const accessToken = jwt.sign({\n        id: user.id\n      }, jwtConfig.secret, {\n        expiresIn: jwtConfig.expireTime\n      });\n      const refreshToken = jwt.sign({\n        id: user.id\n      }, jwtConfig.refreshTokenSecret, {\n        expiresIn: jwtConfig.refreshTokenExpireTime\n      });\n      const userData = { ...user\n      };\n      delete userData.password;\n      const response = {\n        userData,\n        accessToken,\n        refreshToken\n      };\n      return [200, response];\n    } catch (e) {\n      error = e;\n    }\n  } else {\n    error = {\n      email: ['Email or Password is Invalid']\n    };\n  }\n\n  return [400, {\n    error\n  }];\n});\nmock.onPost('/jwt/register').reply(request => {\n  if (request.data.length > 0) {\n    const {\n      email,\n      password,\n      username\n    } = JSON.parse(request.data);\n    const isEmailAlreadyInUse = data.users.find(user => user.email === email);\n    const isUsernameAlreadyInUse = data.users.find(user => user.username === username);\n    const error = {\n      email: isEmailAlreadyInUse ? 'This email is already in use.' : null,\n      username: isUsernameAlreadyInUse ? 'This username is already in use.' : null\n    };\n\n    if (!error.username && !error.email) {\n      const userData = {\n        email,\n        password,\n        username,\n        fullName: '',\n        avatar: null,\n        role: 'admin',\n        ability: [{\n          action: 'manage',\n          subject: 'all'\n        }]\n      }; // Add user id\n\n      const length = data.users.length;\n      let lastIndex = 0;\n\n      if (length) {\n        lastIndex = data.users[length - 1].id;\n      }\n\n      userData.id = lastIndex + 1;\n      data.users.push(userData);\n      const accessToken = jwt.sign({\n        id: userData.id\n      }, jwtConfig.secret, {\n        expiresIn: jwtConfig.expireTime\n      });\n      const user = Object.assign({}, userData);\n      delete user['password'];\n      const response = {\n        user,\n        accessToken\n      };\n      return [200, response];\n    } else {\n      return [200, {\n        error\n      }];\n    }\n  }\n});\nmock.onPost('/jwt/refresh-token').reply(request => {\n  const {\n    refreshToken\n  } = JSON.parse(request.data);\n\n  try {\n    const {\n      id\n    } = jwt.verify(refreshToken, jwtConfig.refreshTokenSecret);\n    const userData = { ...data.users.find(user => user.id === id)\n    };\n    const newAccessToken = jwt.sign({\n      id: userData.id\n    }, jwtConfig.secret, {\n      expiresIn: jwtConfig.expiresIn\n    });\n    const newRefreshToken = jwt.sign({\n      id: userData.id\n    }, jwtConfig.refreshTokenSecret, {\n      expiresIn: jwtConfig.refreshTokenExpireTime\n    });\n    delete userData.password;\n    const response = {\n      userData,\n      accessToken: newAccessToken,\n      refreshToken: newRefreshToken\n    };\n    return [200, response];\n  } catch (e) {\n    const error = 'Invalid refresh token';\n    return [401, {\n      error\n    }];\n  }\n});","map":{"version":3,"names":["mock","jwt","data","users","id","fullName","username","password","avatar","require","default","email","role","ability","action","subject","extras","eCommerceCartItemsCount","jwtConfig","secret","refreshTokenSecret","expireTime","refreshTokenExpireTime","onPost","reply","request","JSON","parse","error","user","find","u","accessToken","sign","expiresIn","refreshToken","userData","response","e","length","isEmailAlreadyInUse","isUsernameAlreadyInUse","lastIndex","push","Object","assign","verify","newAccessToken","newRefreshToken"],"sources":["/home/hp/Documents/Test/full-version/src/@fake-db/jwt/index.js"],"sourcesContent":["import mock from '../mock'\nimport jwt from 'jsonwebtoken'\n\nconst data = {\n  users: [\n    {\n      id: 1,\n      fullName: 'John Doe',\n      username: 'johndoe',\n      password: 'admin',\n      avatar: require('@src/assets/images/portrait/small/avatar-s-11.jpg').default,\n      email: 'admin@demo.com',\n      role: 'admin',\n      ability: [\n        {\n          action: 'manage',\n          subject: 'all'\n        }\n      ],\n      extras: {\n        eCommerceCartItemsCount: 5\n      }\n    },\n    {\n      id: 2,\n      fullName: 'Jane Doe',\n      username: 'janedoe',\n      password: 'client',\n      avatar: require('@src/assets/images/avatars/1-small.png').default,\n      email: 'client@demo.com',\n      role: 'client',\n      ability: [\n        {\n          action: 'read',\n          subject: 'ACL'\n        },\n        {\n          action: 'read',\n          subject: 'Auth'\n        }\n      ],\n      extras: {\n        eCommerceCartItemsCount: 5\n      }\n    }\n  ]\n}\n\n// ! These two secrets shall be in .env file and not in any other file\nconst jwtConfig = {\n  secret: 'dd5f3089-40c3-403d-af14-d0c228b05cb4',\n  refreshTokenSecret: '7c4c1c50-3230-45bf-9eae-c9b2e401c767',\n  expireTime: '10m',\n  refreshTokenExpireTime: '10m'\n}\n\nmock.onPost('/jwt/login').reply(request => {\n  const { email, password } = JSON.parse(request.data)\n\n  let error = {\n    email: ['Something went wrong']\n  }\n\n  const user = data.users.find(u => u.email === email && u.password === password)\n\n  if (user) {\n    try {\n      const accessToken = jwt.sign({ id: user.id }, jwtConfig.secret, { expiresIn: jwtConfig.expireTime })\n      const refreshToken = jwt.sign({ id: user.id }, jwtConfig.refreshTokenSecret, {\n        expiresIn: jwtConfig.refreshTokenExpireTime\n      })\n\n      const userData = { ...user }\n\n      delete userData.password\n\n      const response = {\n        userData,\n        accessToken,\n        refreshToken\n      }\n\n      return [200, response]\n    } catch (e) {\n      error = e\n    }\n  } else {\n    error = {\n      email: ['Email or Password is Invalid']\n    }\n  }\n\n  return [400, { error }]\n})\n\nmock.onPost('/jwt/register').reply(request => {\n  if (request.data.length > 0) {\n    const { email, password, username } = JSON.parse(request.data)\n    const isEmailAlreadyInUse = data.users.find(user => user.email === email)\n    const isUsernameAlreadyInUse = data.users.find(user => user.username === username)\n    const error = {\n      email: isEmailAlreadyInUse ? 'This email is already in use.' : null,\n      username: isUsernameAlreadyInUse ? 'This username is already in use.' : null\n    }\n\n    if (!error.username && !error.email) {\n      const userData = {\n        email,\n        password,\n        username,\n        fullName: '',\n        avatar: null,\n        role: 'admin',\n        ability: [\n          {\n            action: 'manage',\n            subject: 'all'\n          }\n        ]\n      }\n\n      // Add user id\n      const length = data.users.length\n      let lastIndex = 0\n      if (length) {\n        lastIndex = data.users[length - 1].id\n      }\n      userData.id = lastIndex + 1\n\n      data.users.push(userData)\n\n      const accessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expireTime })\n\n      const user = Object.assign({}, userData)\n      delete user['password']\n      const response = { user, accessToken }\n\n      return [200, response]\n    } else {\n      return [200, { error }]\n    }\n  }\n})\n\nmock.onPost('/jwt/refresh-token').reply(request => {\n  const { refreshToken } = JSON.parse(request.data)\n\n  try {\n    const { id } = jwt.verify(refreshToken, jwtConfig.refreshTokenSecret)\n\n    const userData = { ...data.users.find(user => user.id === id) }\n\n    const newAccessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expiresIn })\n    const newRefreshToken = jwt.sign({ id: userData.id }, jwtConfig.refreshTokenSecret, {\n      expiresIn: jwtConfig.refreshTokenExpireTime\n    })\n\n    delete userData.password\n    const response = {\n      userData,\n      accessToken: newAccessToken,\n      refreshToken: newRefreshToken\n    }\n\n    return [200, response]\n  } catch (e) {\n    const error = 'Invalid refresh token'\n    return [401, { error }]\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
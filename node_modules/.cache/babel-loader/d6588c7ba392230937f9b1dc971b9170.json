{"ast":null,"code":"import mock from '../mock';\nconst data = {\n  orders_bar_chart: {\n    title: 'Orders',\n    statistics: '2,76k',\n    series: [{\n      name: '2020',\n      data: [45, 85, 65, 45, 65]\n    }]\n  },\n  profit_line_chart: {\n    title: 'Profit',\n    statistics: '6,24k',\n    series: [{\n      data: [0, 20, 5, 30, 15, 45]\n    }]\n  },\n  subscribers_gained: {\n    series: [{\n      name: 'Subscribers',\n      data: [28, 40, 36, 52, 38, 60, 55]\n    }],\n    analyticsData: {\n      subscribers: 92600\n    }\n  },\n  revenueGenerated: {\n    series: [{\n      name: 'Revenue',\n      data: [350, 275, 400, 300, 350, 300, 450]\n    }],\n    analyticsData: {\n      revenue: 97500\n    }\n  },\n  quarterlySales: {\n    series: [{\n      name: 'Sales',\n      data: [10, 15, 7, 12, 3, 16]\n    }],\n    analyticsData: {\n      sales: '36%'\n    }\n  },\n  ordersRecevied: {\n    series: [{\n      name: 'Orders',\n      data: [10, 15, 8, 15, 7, 12, 8]\n    }],\n    analyticsData: {\n      orders: 97500\n    }\n  },\n  siteTraffic: {\n    series: [{\n      name: 'Traffic Rate',\n      data: [150, 200, 125, 225, 200, 250]\n    }]\n  },\n  activeUsers: {\n    series: [{\n      name: 'Active Users',\n      data: [750, 1000, 900, 1250, 1000, 1200, 1100]\n    }]\n  },\n  newsletter: {\n    series: [{\n      name: 'Newsletter',\n      data: [365, 390, 365, 400, 375, 400]\n    }]\n  }\n};\nmock.onGet('/card/card-statistics/orders-bar-chart').reply(() => [200, data.orders_bar_chart]);\nmock.onGet('/card/card-statistics/profit-line-chart').reply(() => [200, data.profit_line_chart]);\nmock.onGet('/card/card-statistics/subscribers').reply(() => [200, data.subscribers_gained]);\nmock.onGet('/card/card-statistics/revenue').reply(() => [200, data.revenueGenerated]);\nmock.onGet('/card/card-statistics/sales').reply(() => [200, data.quarterlySales]);\nmock.onGet('/card/card-statistics/orders').reply(() => [200, data.ordersRecevied]);\nmock.onGet('/card/card-statistics/site-traffic').reply(() => [200, data.siteTraffic]);\nmock.onGet('/card/card-statistics/active-users').reply(() => [200, data.activeUsers]);\nmock.onGet('/card/card-statistics/newsletter').reply(() => [200, data.newsletter]);","map":{"version":3,"names":["mock","data","orders_bar_chart","title","statistics","series","name","profit_line_chart","subscribers_gained","analyticsData","subscribers","revenueGenerated","revenue","quarterlySales","sales","ordersRecevied","orders","siteTraffic","activeUsers","newsletter","onGet","reply"],"sources":["/var/www/html/Turia_Client_React/src/@fake-db/cards/card-statistics.js"],"sourcesContent":["import mock from '../mock'\n\nconst data = {\n  orders_bar_chart: {\n    title: 'Orders',\n    statistics: '2,76k',\n    series: [\n      {\n        name: '2020',\n        data: [45, 85, 65, 45, 65]\n      }\n    ]\n  },\n  profit_line_chart: {\n    title: 'Profit',\n    statistics: '6,24k',\n    series: [\n      {\n        data: [0, 20, 5, 30, 15, 45]\n      }\n    ]\n  },\n  subscribers_gained: {\n    series: [\n      {\n        name: 'Subscribers',\n        data: [28, 40, 36, 52, 38, 60, 55]\n      }\n    ],\n    analyticsData: {\n      subscribers: 92600\n    }\n  },\n  revenueGenerated: {\n    series: [\n      {\n        name: 'Revenue',\n        data: [350, 275, 400, 300, 350, 300, 450]\n      }\n    ],\n    analyticsData: {\n      revenue: 97500\n    }\n  },\n  quarterlySales: {\n    series: [\n      {\n        name: 'Sales',\n        data: [10, 15, 7, 12, 3, 16]\n      }\n    ],\n    analyticsData: {\n      sales: '36%'\n    }\n  },\n  ordersRecevied: {\n    series: [\n      {\n        name: 'Orders',\n        data: [10, 15, 8, 15, 7, 12, 8]\n      }\n    ],\n    analyticsData: {\n      orders: 97500\n    }\n  },\n  siteTraffic: {\n    series: [\n      {\n        name: 'Traffic Rate',\n        data: [150, 200, 125, 225, 200, 250]\n      }\n    ]\n  },\n  activeUsers: {\n    series: [\n      {\n        name: 'Active Users',\n        data: [750, 1000, 900, 1250, 1000, 1200, 1100]\n      }\n    ]\n  },\n  newsletter: {\n    series: [\n      {\n        name: 'Newsletter',\n        data: [365, 390, 365, 400, 375, 400]\n      }\n    ]\n  }\n}\n\nmock.onGet('/card/card-statistics/orders-bar-chart').reply(() => [200, data.orders_bar_chart])\n\nmock.onGet('/card/card-statistics/profit-line-chart').reply(() => [200, data.profit_line_chart])\n\nmock.onGet('/card/card-statistics/subscribers').reply(() => [200, data.subscribers_gained])\n\nmock.onGet('/card/card-statistics/revenue').reply(() => [200, data.revenueGenerated])\n\nmock.onGet('/card/card-statistics/sales').reply(() => [200, data.quarterlySales])\n\nmock.onGet('/card/card-statistics/orders').reply(() => [200, data.ordersRecevied])\n\nmock.onGet('/card/card-statistics/site-traffic').reply(() => [200, data.siteTraffic])\n\nmock.onGet('/card/card-statistics/active-users').reply(() => [200, data.activeUsers])\n\nmock.onGet('/card/card-statistics/newsletter').reply(() => [200, data.newsletter])\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
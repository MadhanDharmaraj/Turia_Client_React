{"ast":null,"code":"import { get as r, set as e } from \"react-hook-form\";\n\nvar i = function (e, i) {\n  for (var a in i.fields) {\n    var f = i.fields[a];\n\n    if (f && f.ref && \"reportValidity\" in f.ref) {\n      var t = r(e, a);\n      f.ref.setCustomValidity(t && t.message || \"\"), f.ref.reportValidity();\n    }\n  }\n},\n    a = function (a, f) {\n  f.shouldUseNativeValidation && i(a, f);\n  var t = {};\n\n  for (var o in a) {\n    var s = r(f.fields, o);\n    e(t, o, Object.assign(a[o], {\n      ref: s && s.ref\n    }));\n  }\n\n  return t;\n};\n\nexport { a as toNestError, i as validateFieldsNatively };","map":{"version":3,"sources":["../src/validateFieldsNatively.ts","../src/toNestError.ts"],"names":["validateFieldsNatively","errors","options","fieldPath","fields","field","ref","error","get","setCustomValidity","message","reportValidity","toNestError","shouldUseNativeValidation","fieldErrors","path","set","Object","assign"],"mappings":";;AAGaA,IAAAA,CAAAA,GAAyB,UACpCC,CADoC,EAEpCC,CAFoC,EAEpCA;EAEA,KAAK,IAAMC,CAAX,IAAwBD,CAAAA,CAAQE,MAAhC,EAAwC;IACtC,IAAMC,CAAAA,GAAQH,CAAAA,CAAQE,MAARF,CAAeC,CAAfD,CAAd;;IAEA,IAAIG,CAAAA,IAASA,CAAAA,CAAMC,GAAfD,IAAsB,oBAAoBA,CAAAA,CAAMC,GAApD,EAAyD;MACvD,IAAMC,CAAAA,GAAQC,CAAAA,CAAIP,CAAJO,EAAYL,CAAZK,CAAd;MAEAH,CAAAA,CAAMC,GAAND,CAAUI,iBAAVJ,CAA6BE,CAAAA,IAASA,CAAAA,CAAMG,OAAfH,IAA2B,EAAxDF,GAEAA,CAAAA,CAAMC,GAAND,CAAUM,cAAVN,EAFAA;IAEUM;EAAAA;AAAAA,CAZHX;AAAAA,ICOAY,CAAAA,GAAc,UACzBX,CADyB,EAEzBC,CAFyB,EAEzBA;EAEAA,CAAAA,CAAQW,yBAARX,IAAqCF,CAAAA,CAAuBC,CAAvBD,EAA+BE,CAA/BF,CAArCE;EAEA,IAAMY,CAAAA,GAAc,EAApB;;EACA,KAAK,IAAMC,CAAX,IAAmBd,CAAnB,EAA2B;IACzB,IAAMI,CAAAA,GAAQG,CAAAA,CAAIN,CAAAA,CAAQE,MAAZI,EAAoBO,CAApBP,CAAd;IAEAQ,CAAAA,CACEF,CADFE,EAEED,CAFFC,EAGEC,MAAAA,CAAOC,MAAPD,CAAchB,CAAAA,CAAOc,CAAPd,CAAdgB,EAA4B;MAAEX,GAAAA,EAAKD,CAAAA,IAASA,CAAAA,CAAMC;IAAtB,CAA5BW,CAHFD,CAAAA;EAOF;;EAAA,OAAOF,CAAP;AAAOA,CDxBId;;ACwBJc,SAAAA,CAAAA,IAAAA,WAAAA,EAAAA,CAAAA,IAAAA,sBAAAA","sourcesContent":["import { get, FieldError, ResolverOptions } from 'react-hook-form';\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      const error = get(errors, fieldPath) as FieldError | undefined;\n\n      field.ref.setCustomValidity((error && error.message) || '');\n\n      field.ref.reportValidity();\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldError,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n"]},"metadata":{},"sourceType":"module"}
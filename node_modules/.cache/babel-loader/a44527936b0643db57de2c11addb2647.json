{"ast":null,"code":"import { validateFieldsNatively as e, toNestError as t } from \"@hookform/resolvers\";\nimport { appendErrors as r } from \"react-hook-form\";\n\nvar o = function (o, n, a) {\n  return void 0 === n && (n = {}), void 0 === a && (a = {}), function (s, i, c) {\n    try {\n      return Promise.resolve(function (t, r) {\n        try {\n          var u = (n.context && \"development\" === process.env.NODE_ENV && console.warn(\"You should not used the yup options context. Please, use the 'useForm' context object instead\"), Promise.resolve(o[\"sync\" === a.mode ? \"validateSync\" : \"validate\"](s, Object.assign({\n            abortEarly: !1\n          }, n, {\n            context: i\n          }))).then(function (t) {\n            return c.shouldUseNativeValidation && e({}, c), {\n              values: t,\n              errors: {}\n            };\n          }));\n        } catch (e) {\n          return r(e);\n        }\n\n        return u && u.then ? u.then(void 0, r) : u;\n      }(0, function (e) {\n        return {\n          values: {},\n          errors: t((o = e, n = !c.shouldUseNativeValidation && \"all\" === c.criteriaMode, o.inner.reduce(function (e, t) {\n            if (e[t.path] || (e[t.path] = {\n              message: t.message,\n              type: t.type\n            }), n) {\n              var o = e[t.path].types,\n                  a = o && o[t.type];\n              e[t.path] = r(t.path, n, e, t.type, a ? [].concat(a, t.message) : t.message);\n            }\n\n            return e;\n          }, {})), c)\n        };\n        var o, n;\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n};\n\nexport { o as yupResolver };","map":{"version":3,"sources":["../src/yup.ts"],"names":["error","validateAllFieldCriteria","inner","reduce","previous","path","message","type","types","messages","appendErrors","concat","yupResolver","schema","schemaOptions","resolverOptions","values","context","options","process","env","NODE_ENV","console","warn","result","mode","Object","assign","abortEarly","shouldUseNativeValidation","validateFieldsNatively","errors","e","toNestError","criteriaMode"],"mappings":"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","sourcesContent":["import Yup from 'yup';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return error.inner.reduce<Record<string, FieldError>>((previous, error) => {\n    if (!previous[error.path!]) {\n      previous[error.path!] = { message: error.message, type: error.type! };\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = previous[error.path!].types;\n      const messages = types && types[error.type!];\n\n      previous[error.path!] = appendErrors(\n        error.path!,\n        validateAllFieldCriteria,\n        previous,\n        error.type!,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n\n    return previous;\n  }, {});\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: result,\n        errors: {},\n      };\n    } catch (e: any) {\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}
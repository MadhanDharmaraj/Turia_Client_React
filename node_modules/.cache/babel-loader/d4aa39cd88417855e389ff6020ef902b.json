{"ast":null,"code":"//** React Imports\nimport{useEffect}from'react';export var useOnClickOutside=function useOnClickOutside(ref,handler){useEffect(function(){var listener=function listener(event){// ** Do nothing if clicking ref's element or descendent elements\nif(!ref.current||ref.current.contains(event.target)){return;}// ** Call passed function on click outside\nhandler(event);};document.addEventListener('mousedown',listener);document.addEventListener('touchstart',listener);return function(){document.removeEventListener('mousedown',listener);document.removeEventListener('touchstart',listener);};},// ** Add ref and handler to effect dependencies\n// ** It's worth noting that because passed in handler is a new ...\n// ** ... function on every render that will cause this effect ...\n// ** ... callback/cleanup to run every render. It's not a big deal ...\n// ** ... but to optimize you can wrap handler in useCallback before ...\n// ** ... passing it into this hook.\n[ref,handler]);};","map":{"version":3,"names":["useEffect","useOnClickOutside","ref","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"sources":["/var/www/html/Turia_Client_React/src/utility/hooks/useOnClickOutside.js"],"sourcesContent":["//** React Imports\nimport { useEffect } from 'react'\n\nexport const useOnClickOutside = (ref, handler) => {\n  useEffect(\n    () => {\n      const listener = event => {\n        // ** Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          return\n        }\n\n        // ** Call passed function on click outside\n        handler(event)\n      }\n\n      document.addEventListener('mousedown', listener)\n      document.addEventListener('touchstart', listener)\n\n      return () => {\n        document.removeEventListener('mousedown', listener)\n        document.removeEventListener('touchstart', listener)\n      }\n    },\n    // ** Add ref and handler to effect dependencies\n    // ** It's worth noting that because passed in handler is a new ...\n    // ** ... function on every render that will cause this effect ...\n    // ** ... callback/cleanup to run every render. It's not a big deal ...\n    // ** ... but to optimize you can wrap handler in useCallback before ...\n    // ** ... passing it into this hook.\n    [ref, handler]\n  )\n}\n"],"mappings":"AAAA;AACA,OAASA,SAAT,KAA0B,OAA1B,CAEA,MAAO,IAAMC,kBAAiB,CAAG,QAApBA,kBAAoB,CAACC,GAAD,CAAMC,OAAN,CAAkB,CACjDH,SAAS,CACP,UAAM,CACJ,GAAMI,SAAQ,CAAG,QAAXA,SAAW,CAAAC,KAAK,CAAI,CACxB;AACA,GAAI,CAACH,GAAG,CAACI,OAAL,EAAgBJ,GAAG,CAACI,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAApB,CAAwD,CACtD,OACD,CAED;AACAL,OAAO,CAACE,KAAD,CAAP,CACD,CARD,CAUAI,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,CAAuCN,QAAvC,EACAK,QAAQ,CAACC,gBAAT,CAA0B,YAA1B,CAAwCN,QAAxC,EAEA,MAAO,WAAM,CACXK,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,CAA0CP,QAA1C,EACAK,QAAQ,CAACE,mBAAT,CAA6B,YAA7B,CAA2CP,QAA3C,EACD,CAHD,CAID,CAnBM,CAoBP;AACA;AACA;AACA;AACA;AACA;AACA,CAACF,GAAD,CAAMC,OAAN,CA1BO,CAAT,CA4BD,CA7BM"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/hp/Documents/Test/full-version/src/views/components/tooltips/TooltipControlled.js\",\n    _s = $RefreshSig$();\n\n// ** React Imports\nimport { Fragment, useState } from 'react'; // ** Reactstrap Imports\n\nimport { Button, Tooltip } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TooltipControlled = () => {\n  _s();\n\n  // ** State\n  const [tooltipOpen, setTooltipOpen] = useState(false);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      id: \"ControlledExample\",\n      children: \"Controlled\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n      placement: \"top\",\n      isOpen: tooltipOpen,\n      target: \"ControlledExample\",\n      toggle: () => setTooltipOpen(!tooltipOpen),\n      children: \"Hello World !\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TooltipControlled, \"W4bzAaoI73SwFEIR2Qbo7WjEE4o=\");\n\n_c = TooltipControlled;\nexport default TooltipControlled;\n\nvar _c;\n\n$RefreshReg$(_c, \"TooltipControlled\");","map":{"version":3,"names":["Fragment","useState","Button","Tooltip","TooltipControlled","tooltipOpen","setTooltipOpen"],"sources":["/home/hp/Documents/Test/full-version/src/views/components/tooltips/TooltipControlled.js"],"sourcesContent":["// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Reactstrap Imports\nimport { Button, Tooltip } from 'reactstrap'\n\nconst TooltipControlled = () => {\n  // ** State\n  const [tooltipOpen, setTooltipOpen] = useState(false)\n\n  return (\n    <Fragment>\n      <Button color='primary' id='ControlledExample'>\n        Controlled\n      </Button>\n      <Tooltip\n        placement='top'\n        isOpen={tooltipOpen}\n        target='ControlledExample'\n        toggle={() => setTooltipOpen(!tooltipOpen)}\n      >\n        Hello World !\n      </Tooltip>\n    </Fragment>\n  )\n}\nexport default TooltipControlled\n"],"mappings":";;;AAAA;AACA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,OAAnC,C,CAEA;;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,YAAhC;;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;EAAA;;EAC9B;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,KAAD,CAA9C;EAEA,oBACE,QAAC,QAAD;IAAA,wBACE,QAAC,MAAD;MAAQ,KAAK,EAAC,SAAd;MAAwB,EAAE,EAAC,mBAA3B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAIE,QAAC,OAAD;MACE,SAAS,EAAC,KADZ;MAEE,MAAM,EAAEI,WAFV;MAGE,MAAM,EAAC,mBAHT;MAIE,MAAM,EAAE,MAAMC,cAAc,CAAC,CAACD,WAAF,CAJ9B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAJF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAeD,CAnBD;;GAAMD,iB;;KAAAA,iB;AAoBN,eAAeA,iBAAf"},"metadata":{},"sourceType":"module"}
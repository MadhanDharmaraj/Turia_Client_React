{"ast":null,"code":"import _objectSpread from\"/var/www/html/Turia_Client_React/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _defineProperty from\"/var/www/html/Turia_Client_React/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _slicedToArray from\"/var/www/html/Turia_Client_React/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _objectWithoutProperties from\"/var/www/html/Turia_Client_React/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";var _excluded=[\"label\",\"hideIcon\",\"showIcon\",\"visible\",\"className\",\"htmlFor\",\"placeholder\",\"iconSize\",\"inputClassName\",\"invalid\"];// ** React Imports\nimport{Fragment,useState,forwardRef}from'react';// ** Third Party Components\nimport classnames from'classnames';import{Eye,EyeOff}from'react-feather';// ** Reactstrap Imports\nimport{InputGroup,Input,InputGroupText,Label}from'reactstrap';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var InputPasswordToggle=/*#__PURE__*/forwardRef(function(props,ref){var _classnames;// ** Props\nvar label=props.label,hideIcon=props.hideIcon,showIcon=props.showIcon,visible=props.visible,className=props.className,htmlFor=props.htmlFor,placeholder=props.placeholder,iconSize=props.iconSize,inputClassName=props.inputClassName,invalid=props.invalid,rest=_objectWithoutProperties(props,_excluded);// ** State\nvar _useState=useState(visible),_useState2=_slicedToArray(_useState,2),inputVisibility=_useState2[0],setInputVisibility=_useState2[1];// ** Renders Icon Based On Visibility\nvar renderIcon=function renderIcon(){var size=iconSize?iconSize:14;if(inputVisibility===false){return hideIcon?hideIcon:/*#__PURE__*/_jsx(Eye,{size:size});}else{return showIcon?showIcon:/*#__PURE__*/_jsx(EyeOff,{size:size});}};return/*#__PURE__*/_jsxs(Fragment,{children:[label?/*#__PURE__*/_jsx(Label,{className:\"form-label\",for:htmlFor,children:label}):null,/*#__PURE__*/_jsxs(InputGroup,{className:classnames((_classnames={},_defineProperty(_classnames,className,className),_defineProperty(_classnames,'is-invalid',invalid),_classnames)),children:[/*#__PURE__*/_jsx(Input,_objectSpread(_objectSpread({ref:ref,invalid:invalid,type:inputVisibility===false?'password':'text',placeholder:placeholder?placeholder:'············',className:classnames(_defineProperty({},inputClassName,inputClassName))/*eslint-disable */},label&&htmlFor?{id:htmlFor}:{}),rest)),/*#__PURE__*/_jsx(InputGroupText,{className:\"cursor-pointer\",onClick:function onClick(){return setInputVisibility(!inputVisibility);},children:renderIcon()})]})]});});export default InputPasswordToggle;// ** PropTypes\n// ** Default Props\nInputPasswordToggle.defaultProps={visible:false};","map":{"version":3,"names":["Fragment","useState","forwardRef","classnames","Eye","EyeOff","InputGroup","Input","InputGroupText","Label","InputPasswordToggle","props","ref","label","hideIcon","showIcon","visible","className","htmlFor","placeholder","iconSize","inputClassName","invalid","rest","inputVisibility","setInputVisibility","renderIcon","size","id","defaultProps"],"sources":["/var/www/html/Turia_Client_React/src/@core/components/input-password-toggle/index.js"],"sourcesContent":["// ** React Imports\nimport { Fragment, useState, forwardRef } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className='form-label' for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          'is-invalid': invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"mappings":"+mBAAA;AACA,OAASA,QAAT,CAAmBC,QAAnB,CAA6BC,UAA7B,KAA+C,OAA/C,CAEA;AAEA,MAAOC,WAAP,KAAuB,YAAvB,CACA,OAASC,GAAT,CAAcC,MAAd,KAA4B,eAA5B,CAEA;AACA,OAASC,UAAT,CAAqBC,KAArB,CAA4BC,cAA5B,CAA4CC,KAA5C,KAAyD,YAAzD,C,wFAEA,GAAMC,oBAAmB,cAAGR,UAAU,CAAC,SAACS,KAAD,CAAQC,GAAR,CAAgB,iBACrD;AACA,GACEC,MADF,CAYIF,KAZJ,CACEE,KADF,CAEEC,QAFF,CAYIH,KAZJ,CAEEG,QAFF,CAGEC,QAHF,CAYIJ,KAZJ,CAGEI,QAHF,CAIEC,OAJF,CAYIL,KAZJ,CAIEK,OAJF,CAKEC,SALF,CAYIN,KAZJ,CAKEM,SALF,CAMEC,OANF,CAYIP,KAZJ,CAMEO,OANF,CAOEC,WAPF,CAYIR,KAZJ,CAOEQ,WAPF,CAQEC,QARF,CAYIT,KAZJ,CAQES,QARF,CASEC,cATF,CAYIV,KAZJ,CASEU,cATF,CAUEC,OAVF,CAYIX,KAZJ,CAUEW,OAVF,CAWKC,IAXL,0BAYIZ,KAZJ,YAcA;AACA,cAA8CV,QAAQ,CAACe,OAAD,CAAtD,wCAAOQ,eAAP,eAAwBC,kBAAxB,eAEA;AACA,GAAMC,WAAU,CAAG,QAAbA,WAAa,EAAM,CACvB,GAAMC,KAAI,CAAGP,QAAQ,CAAGA,QAAH,CAAc,EAAnC,CAEA,GAAII,eAAe,GAAK,KAAxB,CAA+B,CAC7B,MAAOV,SAAQ,CAAGA,QAAH,cAAc,KAAC,GAAD,EAAK,IAAI,CAAEa,IAAX,EAA7B,CACD,CAFD,IAEO,CACL,MAAOZ,SAAQ,CAAGA,QAAH,cAAc,KAAC,MAAD,EAAQ,IAAI,CAAEY,IAAd,EAA7B,CACD,CACF,CARD,CAUA,mBACE,MAAC,QAAD,YACGd,KAAK,cACJ,KAAC,KAAD,EAAO,SAAS,CAAC,YAAjB,CAA8B,GAAG,CAAEK,OAAnC,UACGL,KADH,EADI,CAIF,IALN,cAME,MAAC,UAAD,EACE,SAAS,CAAEV,UAAU,6CAClBc,SADkB,CACNA,SADM,8BAEnB,YAFmB,CAELK,OAFK,eADvB,wBAME,KAAC,KAAD,8BACE,GAAG,CAAEV,GADP,CAEE,OAAO,CAAEU,OAFX,CAGE,IAAI,CAAEE,eAAe,GAAK,KAApB,CAA4B,UAA5B,CAAyC,MAHjD,CAIE,WAAW,CAAEL,WAAW,CAAGA,WAAH,CAAiB,cAJ3C,CAKE,SAAS,CAAEhB,UAAU,oBAClBkB,cADkB,CACDA,cADC,EAGrB,mBARF,EASOR,KAAK,EAAIK,OAAT,CACD,CACEU,EAAE,CAAEV,OADN,CADC,CAID,EAbN,EAcMK,IAdN,EANF,cAuBE,KAAC,cAAD,EAAgB,SAAS,CAAC,gBAA1B,CAA2C,OAAO,CAAE,yBAAME,mBAAkB,CAAC,CAACD,eAAF,CAAxB,EAApD,UACGE,UAAU,EADb,EAvBF,GANF,GADF,CAoCD,CAlEqC,CAAtC,CAoEA,cAAehB,oBAAf,CAEA;AAwBA;AACAA,mBAAmB,CAACmB,YAApB,CAAmC,CACjCb,OAAO,CAAE,KADwB,CAAnC"},"metadata":{},"sourceType":"module"}
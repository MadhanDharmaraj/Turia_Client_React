{"ast":null,"code":"/*!\nFullCalendar v5.10.1\nDocs & License: https://fullcalendar.io/\n(c) 2021 Adam Shaw\n*/\nimport './main.css';\nimport { getUniqueDomId, getDateMeta, buildNavLinkAttrs, getDayClassNames, createElement, RenderHook, formatDayString, BaseComponent, Fragment, createFormatter, EventRoot, getSegAnchorAttrs, isMultiDayRange, buildSegTimeText, memoize, ViewRoot, Scroller, NowTimer, sortEventSegs, getSegMeta, sliceEventStore, intersectRanges, DateComponent, startOfDay, addDays, identity, createPlugin } from '@fullcalendar/common';\nimport { __extends, __assign } from 'tslib';\n\nvar ListViewHeaderRow =\n/** @class */\nfunction (_super) {\n  __extends(ListViewHeaderRow, _super);\n\n  function ListViewHeaderRow() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      textId: getUniqueDomId()\n    };\n    return _this;\n  }\n\n  ListViewHeaderRow.prototype.render = function () {\n    var _a = this.context,\n        theme = _a.theme,\n        dateEnv = _a.dateEnv,\n        options = _a.options,\n        viewApi = _a.viewApi;\n    var _b = this.props,\n        cellId = _b.cellId,\n        dayDate = _b.dayDate,\n        todayRange = _b.todayRange;\n    var textId = this.state.textId;\n    var dayMeta = getDateMeta(dayDate, todayRange); // will ever be falsy?\n\n    var text = options.listDayFormat ? dateEnv.format(dayDate, options.listDayFormat) : ''; // will ever be falsy? also, BAD NAME \"alt\"\n\n    var sideText = options.listDaySideFormat ? dateEnv.format(dayDate, options.listDaySideFormat) : '';\n\n    var hookProps = __assign({\n      date: dateEnv.toDate(dayDate),\n      view: viewApi,\n      textId: textId,\n      text: text,\n      sideText: sideText,\n      navLinkAttrs: buildNavLinkAttrs(this.context, dayDate),\n      sideNavLinkAttrs: buildNavLinkAttrs(this.context, dayDate, 'day', false)\n    }, dayMeta);\n\n    var classNames = ['fc-list-day'].concat(getDayClassNames(dayMeta, theme)); // TODO: make a reusable HOC for dayHeader (used in daygrid/timegrid too)\n\n    return createElement(RenderHook, {\n      hookProps: hookProps,\n      classNames: options.dayHeaderClassNames,\n      content: options.dayHeaderContent,\n      defaultContent: renderInnerContent,\n      didMount: options.dayHeaderDidMount,\n      willUnmount: options.dayHeaderWillUnmount\n    }, function (rootElRef, customClassNames, innerElRef, innerContent) {\n      return createElement(\"tr\", {\n        ref: rootElRef,\n        className: classNames.concat(customClassNames).join(' '),\n        \"data-date\": formatDayString(dayDate)\n      }, createElement(\"th\", {\n        scope: \"colgroup\",\n        colSpan: 3,\n        id: cellId,\n        \"aria-labelledby\": textId\n      }, createElement(\"div\", {\n        className: 'fc-list-day-cushion ' + theme.getClass('tableCellShaded'),\n        ref: innerElRef\n      }, innerContent)));\n    });\n  };\n\n  return ListViewHeaderRow;\n}(BaseComponent);\n\nfunction renderInnerContent(props) {\n  return createElement(Fragment, null, props.text && createElement(\"a\", __assign({\n    id: props.textId,\n    className: \"fc-list-day-text\"\n  }, props.navLinkAttrs), props.text), props.sideText &&\n  /* not keyboard tabbable */\n  createElement(\"a\", __assign({\n    \"aria-hidden\": true,\n    className: \"fc-list-day-side-text\"\n  }, props.sideNavLinkAttrs), props.sideText));\n}\n\nvar DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: 'short'\n});\n\nvar ListViewEventRow =\n/** @class */\nfunction (_super) {\n  __extends(ListViewEventRow, _super);\n\n  function ListViewEventRow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ListViewEventRow.prototype.render = function () {\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var seg = props.seg,\n        timeHeaderId = props.timeHeaderId,\n        eventHeaderId = props.eventHeaderId,\n        dateHeaderId = props.dateHeaderId;\n    var timeFormat = context.options.eventTimeFormat || DEFAULT_TIME_FORMAT;\n    return createElement(EventRoot, {\n      seg: seg,\n      timeText: \"\" // BAD. because of all-day content\n      ,\n      disableDragging: true,\n      disableResizing: true,\n      defaultContent: function () {\n        return renderEventInnerContent(seg, context);\n      }\n      /* weird */\n      ,\n      isPast: props.isPast,\n      isFuture: props.isFuture,\n      isToday: props.isToday,\n      isSelected: props.isSelected,\n      isDragging: props.isDragging,\n      isResizing: props.isResizing,\n      isDateSelecting: props.isDateSelecting\n    }, function (rootElRef, classNames, innerElRef, innerContent, hookProps) {\n      return createElement(\"tr\", {\n        className: ['fc-list-event', hookProps.event.url ? 'fc-event-forced-url' : ''].concat(classNames).join(' '),\n        ref: rootElRef\n      }, buildTimeContent(seg, timeFormat, context, timeHeaderId, dateHeaderId), createElement(\"td\", {\n        \"aria-hidden\": true,\n        className: \"fc-list-event-graphic\"\n      }, createElement(\"span\", {\n        className: \"fc-list-event-dot\",\n        style: {\n          borderColor: hookProps.borderColor || hookProps.backgroundColor\n        }\n      })), createElement(\"td\", {\n        ref: innerElRef,\n        headers: eventHeaderId + \" \" + dateHeaderId,\n        className: \"fc-list-event-title\"\n      }, innerContent));\n    });\n  };\n\n  return ListViewEventRow;\n}(BaseComponent);\n\nfunction renderEventInnerContent(seg, context) {\n  var interactiveAttrs = getSegAnchorAttrs(seg, context);\n  return createElement(\"a\", __assign({}, interactiveAttrs), seg.eventRange.def.title);\n}\n\nfunction buildTimeContent(seg, timeFormat, context, timeHeaderId, dateHeaderId) {\n  var options = context.options;\n\n  if (options.displayEventTime !== false) {\n    var eventDef = seg.eventRange.def;\n    var eventInstance = seg.eventRange.instance;\n    var doAllDay = false;\n    var timeText = void 0;\n\n    if (eventDef.allDay) {\n      doAllDay = true;\n    } else if (isMultiDayRange(seg.eventRange.range)) {\n      // TODO: use (!isStart || !isEnd) instead?\n      if (seg.isStart) {\n        timeText = buildSegTimeText(seg, timeFormat, context, null, null, eventInstance.range.start, seg.end);\n      } else if (seg.isEnd) {\n        timeText = buildSegTimeText(seg, timeFormat, context, null, null, seg.start, eventInstance.range.end);\n      } else {\n        doAllDay = true;\n      }\n    } else {\n      timeText = buildSegTimeText(seg, timeFormat, context);\n    }\n\n    if (doAllDay) {\n      var hookProps = {\n        text: context.options.allDayText,\n        view: context.viewApi\n      };\n      return createElement(RenderHook, {\n        hookProps: hookProps,\n        classNames: options.allDayClassNames,\n        content: options.allDayContent,\n        defaultContent: renderAllDayInner,\n        didMount: options.allDayDidMount,\n        willUnmount: options.allDayWillUnmount\n      }, function (rootElRef, classNames, innerElRef, innerContent) {\n        return createElement(\"td\", {\n          ref: rootElRef,\n          headers: timeHeaderId + \" \" + dateHeaderId,\n          className: ['fc-list-event-time'].concat(classNames).join(' ')\n        }, innerContent);\n      });\n    }\n\n    return createElement(\"td\", {\n      className: \"fc-list-event-time\"\n    }, timeText);\n  }\n\n  return null;\n}\n\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text;\n}\n/*\nResponsible for the scroller, and forwarding event-related actions into the \"grid\".\n*/\n\n\nvar ListView =\n/** @class */\nfunction (_super) {\n  __extends(ListView, _super);\n\n  function ListView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.computeDateVars = memoize(computeDateVars);\n    _this.eventStoreToSegs = memoize(_this._eventStoreToSegs);\n    _this.state = {\n      timeHeaderId: getUniqueDomId(),\n      eventHeaderId: getUniqueDomId(),\n      dateHeaderIdRoot: getUniqueDomId()\n    };\n\n    _this.setRootEl = function (rootEl) {\n      if (rootEl) {\n        _this.context.registerInteractiveComponent(_this, {\n          el: rootEl\n        });\n      } else {\n        _this.context.unregisterInteractiveComponent(_this);\n      }\n    };\n\n    return _this;\n  }\n\n  ListView.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var extraClassNames = ['fc-list', context.theme.getClass('table'), context.options.stickyHeaderDates !== false ? 'fc-list-sticky' : ''];\n\n    var _b = this.computeDateVars(props.dateProfile),\n        dayDates = _b.dayDates,\n        dayRanges = _b.dayRanges;\n\n    var eventSegs = this.eventStoreToSegs(props.eventStore, props.eventUiBases, dayRanges);\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec,\n      elRef: this.setRootEl\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        ref: rootElRef,\n        className: extraClassNames.concat(classNames).join(' ')\n      }, createElement(Scroller, {\n        liquid: !props.isHeightAuto,\n        overflowX: props.isHeightAuto ? 'visible' : 'hidden',\n        overflowY: props.isHeightAuto ? 'visible' : 'auto'\n      }, eventSegs.length > 0 ? _this.renderSegList(eventSegs, dayDates) : _this.renderEmptyMessage()));\n    });\n  };\n\n  ListView.prototype.renderEmptyMessage = function () {\n    var _a = this.context,\n        options = _a.options,\n        viewApi = _a.viewApi;\n    var hookProps = {\n      text: options.noEventsText,\n      view: viewApi\n    };\n    return createElement(RenderHook, {\n      hookProps: hookProps,\n      classNames: options.noEventsClassNames,\n      content: options.noEventsContent,\n      defaultContent: renderNoEventsInner,\n      didMount: options.noEventsDidMount,\n      willUnmount: options.noEventsWillUnmount\n    }, function (rootElRef, classNames, innerElRef, innerContent) {\n      return createElement(\"div\", {\n        className: ['fc-list-empty'].concat(classNames).join(' '),\n        ref: rootElRef\n      }, createElement(\"div\", {\n        className: \"fc-list-empty-cushion\",\n        ref: innerElRef\n      }, innerContent));\n    });\n  };\n\n  ListView.prototype.renderSegList = function (allSegs, dayDates) {\n    var _a = this.context,\n        theme = _a.theme,\n        options = _a.options;\n    var _b = this.state,\n        timeHeaderId = _b.timeHeaderId,\n        eventHeaderId = _b.eventHeaderId,\n        dateHeaderIdRoot = _b.dateHeaderIdRoot;\n    var segsByDay = groupSegsByDay(allSegs); // sparse array\n\n    return createElement(NowTimer, {\n      unit: \"day\"\n    }, function (nowDate, todayRange) {\n      var innerNodes = [];\n\n      for (var dayIndex = 0; dayIndex < segsByDay.length; dayIndex += 1) {\n        var daySegs = segsByDay[dayIndex];\n\n        if (daySegs) {\n          // sparse array, so might be undefined\n          var dayStr = formatDayString(dayDates[dayIndex]);\n          var dateHeaderId = dateHeaderIdRoot + '-' + dayStr; // append a day header\n\n          innerNodes.push(createElement(ListViewHeaderRow, {\n            key: dayStr,\n            cellId: dateHeaderId,\n            dayDate: dayDates[dayIndex],\n            todayRange: todayRange\n          }));\n          daySegs = sortEventSegs(daySegs, options.eventOrder);\n\n          for (var _i = 0, daySegs_1 = daySegs; _i < daySegs_1.length; _i++) {\n            var seg = daySegs_1[_i];\n            innerNodes.push(createElement(ListViewEventRow, __assign({\n              key: dayStr + ':' + seg.eventRange.instance.instanceId\n              /* are multiple segs for an instanceId */\n              ,\n              seg: seg,\n              isDragging: false,\n              isResizing: false,\n              isDateSelecting: false,\n              isSelected: false,\n              timeHeaderId: timeHeaderId,\n              eventHeaderId: eventHeaderId,\n              dateHeaderId: dateHeaderId\n            }, getSegMeta(seg, todayRange, nowDate))));\n          }\n        }\n      }\n\n      return createElement(\"table\", {\n        className: 'fc-list-table ' + theme.getClass('table')\n      }, createElement(\"thead\", null, createElement(\"tr\", null, createElement(\"th\", {\n        scope: \"col\",\n        id: timeHeaderId\n      }, options.timeHint), createElement(\"th\", {\n        scope: \"col\",\n        \"aria-hidden\": true\n      }), createElement(\"th\", {\n        scope: \"col\",\n        id: eventHeaderId\n      }, options.eventHint))), createElement(\"tbody\", null, innerNodes));\n    });\n  };\n\n  ListView.prototype._eventStoreToSegs = function (eventStore, eventUiBases, dayRanges) {\n    return this.eventRangesToSegs(sliceEventStore(eventStore, eventUiBases, this.props.dateProfile.activeRange, this.context.options.nextDayThreshold).fg, dayRanges);\n  };\n\n  ListView.prototype.eventRangesToSegs = function (eventRanges, dayRanges) {\n    var segs = [];\n\n    for (var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++) {\n      var eventRange = eventRanges_1[_i];\n      segs.push.apply(segs, this.eventRangeToSegs(eventRange, dayRanges));\n    }\n\n    return segs;\n  };\n\n  ListView.prototype.eventRangeToSegs = function (eventRange, dayRanges) {\n    var dateEnv = this.context.dateEnv;\n    var nextDayThreshold = this.context.options.nextDayThreshold;\n    var range = eventRange.range;\n    var allDay = eventRange.def.allDay;\n    var dayIndex;\n    var segRange;\n    var seg;\n    var segs = [];\n\n    for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex += 1) {\n      segRange = intersectRanges(range, dayRanges[dayIndex]);\n\n      if (segRange) {\n        seg = {\n          component: this,\n          eventRange: eventRange,\n          start: segRange.start,\n          end: segRange.end,\n          isStart: eventRange.isStart && segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: eventRange.isEnd && segRange.end.valueOf() === range.end.valueOf(),\n          dayIndex: dayIndex\n        };\n        segs.push(seg); // detect when range won't go fully into the next day,\n        // and mutate the latest seg to the be the end.\n\n        if (!seg.isEnd && !allDay && dayIndex + 1 < dayRanges.length && range.end < dateEnv.add(dayRanges[dayIndex + 1].start, nextDayThreshold)) {\n          seg.end = range.end;\n          seg.isEnd = true;\n          break;\n        }\n      }\n    }\n\n    return segs;\n  };\n\n  return ListView;\n}(DateComponent);\n\nfunction renderNoEventsInner(hookProps) {\n  return hookProps.text;\n}\n\nfunction computeDateVars(dateProfile) {\n  var dayStart = startOfDay(dateProfile.renderRange.start);\n  var viewEnd = dateProfile.renderRange.end;\n  var dayDates = [];\n  var dayRanges = [];\n\n  while (dayStart < viewEnd) {\n    dayDates.push(dayStart);\n    dayRanges.push({\n      start: dayStart,\n      end: addDays(dayStart, 1)\n    });\n    dayStart = addDays(dayStart, 1);\n  }\n\n  return {\n    dayDates: dayDates,\n    dayRanges: dayRanges\n  };\n} // Returns a sparse array of arrays, segs grouped by their dayIndex\n\n\nfunction groupSegsByDay(segs) {\n  var segsByDay = []; // sparse array\n\n  var i;\n  var seg;\n\n  for (i = 0; i < segs.length; i += 1) {\n    seg = segs[i];\n    (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = [])).push(seg);\n  }\n\n  return segsByDay;\n}\n\nvar OPTION_REFINERS = {\n  listDayFormat: createFalsableFormatter,\n  listDaySideFormat: createFalsableFormatter,\n  noEventsClassNames: identity,\n  noEventsContent: identity,\n  noEventsDidMount: identity,\n  noEventsWillUnmount: identity // noEventsText is defined in base options\n\n};\n\nfunction createFalsableFormatter(input) {\n  return input === false ? null : createFormatter(input);\n}\n\nvar main = createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  views: {\n    list: {\n      component: ListView,\n      buttonTextKey: 'list',\n      listDayFormat: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      } // like \"January 1, 2016\"\n\n    },\n    listDay: {\n      type: 'list',\n      duration: {\n        days: 1\n      },\n      listDayFormat: {\n        weekday: 'long'\n      } // day-of-week is all we need. full date is probably in headerToolbar\n\n    },\n    listWeek: {\n      type: 'list',\n      duration: {\n        weeks: 1\n      },\n      listDayFormat: {\n        weekday: 'long'\n      },\n      listDaySideFormat: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    listMonth: {\n      type: 'list',\n      duration: {\n        month: 1\n      },\n      listDaySideFormat: {\n        weekday: 'long'\n      } // day-of-week is nice-to-have\n\n    },\n    listYear: {\n      type: 'list',\n      duration: {\n        year: 1\n      },\n      listDaySideFormat: {\n        weekday: 'long'\n      } // day-of-week is nice-to-have\n\n    }\n  }\n});\nexport default main;\nexport { ListView };","map":{"version":3,"sources":["src/ListViewHeaderRow.tsx","src/ListViewEventRow.tsx","src/ListView.tsx","src/options.ts","src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BaseComponent, DateMarker, createElement, DateRange, getDateMeta,\n  RenderHook, DayHeaderContentArg, getDayClassNames, formatDayString, Fragment, buildNavLinkAttrs, getUniqueDomId,\n} from '@fullcalendar/common'\n\nexport interface ListViewHeaderRowProps {\n  cellId: string\n  dayDate: DateMarker\n  todayRange: DateRange\n}\n\ninterface HookProps extends DayHeaderContentArg { // doesn't enforce much since DayCellContentArg allow extra props\n  textId: string // for aria-labelledby\n  text: string\n  sideText: string\n}\n\nexport class ListViewHeaderRow extends BaseComponent<ListViewHeaderRowProps> {\n  state = {\n    textId: getUniqueDomId(),\n  }\n\n  render() {\n    let { theme, dateEnv, options, viewApi } = this.context\n    let { cellId, dayDate, todayRange } = this.props\n    let { textId } = this.state\n    let dayMeta = getDateMeta(dayDate, todayRange)\n\n    // will ever be falsy?\n    let text = options.listDayFormat ? dateEnv.format(dayDate, options.listDayFormat) : ''\n\n    // will ever be falsy? also, BAD NAME \"alt\"\n    let sideText = options.listDaySideFormat ? dateEnv.format(dayDate, options.listDaySideFormat) : ''\n\n    let hookProps: HookProps = {\n      date: dateEnv.toDate(dayDate),\n      view: viewApi,\n      textId,\n      text,\n      sideText,\n      navLinkAttrs: buildNavLinkAttrs(this.context, dayDate),\n      sideNavLinkAttrs: buildNavLinkAttrs(this.context, dayDate, 'day', false),\n      ...dayMeta,\n    }\n\n    let classNames = ['fc-list-day'].concat(\n      getDayClassNames(dayMeta, theme),\n    )\n\n    // TODO: make a reusable HOC for dayHeader (used in daygrid/timegrid too)\n    return (\n      <RenderHook<HookProps>\n        hookProps={hookProps}\n        classNames={options.dayHeaderClassNames}\n        content={options.dayHeaderContent}\n        defaultContent={renderInnerContent}\n        didMount={options.dayHeaderDidMount}\n        willUnmount={options.dayHeaderWillUnmount}\n      >\n        {(rootElRef, customClassNames, innerElRef, innerContent) => (\n          <tr\n            ref={rootElRef}\n            className={classNames.concat(customClassNames).join(' ')}\n            data-date={formatDayString(dayDate)}\n          >\n            {/* TODO: force-hide top border based on :first-child */}\n            <th scope=\"colgroup\" colSpan={3} id={cellId} aria-labelledby={textId}>\n              <div className={'fc-list-day-cushion ' + theme.getClass('tableCellShaded')} ref={innerElRef}>\n                {innerContent}\n              </div>\n            </th>\n          </tr>\n        )}\n      </RenderHook>\n    )\n  }\n}\n\nfunction renderInnerContent(props: HookProps) {\n  return (\n    <Fragment>\n      {props.text && (\n        <a id={props.textId} className=\"fc-list-day-text\" {...props.navLinkAttrs}>\n          {props.text}\n        </a>\n      )}\n      {props.sideText && (/* not keyboard tabbable */\n        <a aria-hidden className=\"fc-list-day-side-text\" {...props.sideNavLinkAttrs}>\n          {props.sideText}\n        </a>\n      )}\n    </Fragment>\n  )\n}\n","import {\n  MinimalEventProps, BaseComponent, ViewContext, createElement, AllDayContentArg,\n  Seg, isMultiDayRange, DateFormatter, buildSegTimeText, createFormatter, EventRoot, ComponentChildren, RenderHook, getSegAnchorAttrs,\n} from '@fullcalendar/common'\n\nconst DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: 'short',\n})\n\nexport interface ListViewEventRowProps extends MinimalEventProps {\n  timeHeaderId: string\n  eventHeaderId: string\n  dateHeaderId: string\n}\n\nexport class ListViewEventRow extends BaseComponent<ListViewEventRowProps> {\n  render() {\n    let { props, context } = this\n    let { seg, timeHeaderId, eventHeaderId, dateHeaderId } = props\n    let timeFormat = context.options.eventTimeFormat || DEFAULT_TIME_FORMAT\n\n    return (\n      <EventRoot\n        seg={seg}\n        timeText=\"\" // BAD. because of all-day content\n        disableDragging\n        disableResizing\n        defaultContent={() => renderEventInnerContent(seg, context) /* weird */}\n        isPast={props.isPast}\n        isFuture={props.isFuture}\n        isToday={props.isToday}\n        isSelected={props.isSelected}\n        isDragging={props.isDragging}\n        isResizing={props.isResizing}\n        isDateSelecting={props.isDateSelecting}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent, hookProps) => (\n          <tr className={['fc-list-event', hookProps.event.url ? 'fc-event-forced-url' : ''].concat(classNames).join(' ')} ref={rootElRef}>\n            {buildTimeContent(seg, timeFormat, context, timeHeaderId, dateHeaderId)}\n            <td aria-hidden className=\"fc-list-event-graphic\">\n              <span className=\"fc-list-event-dot\" style={{ borderColor: hookProps.borderColor || hookProps.backgroundColor }} />\n            </td>\n            <td ref={innerElRef} headers={`${eventHeaderId} ${dateHeaderId}`} className=\"fc-list-event-title\">\n              {innerContent}\n            </td>\n          </tr>\n        )}\n      </EventRoot>\n    )\n  }\n}\n\nfunction renderEventInnerContent(seg: Seg, context: ViewContext) {\n  let interactiveAttrs = getSegAnchorAttrs(seg, context)\n  return (\n    <a {...interactiveAttrs}>\n      {/* TODO: document how whole row become clickable */}\n      {seg.eventRange.def.title}\n    </a>\n  )\n}\n\nfunction buildTimeContent(\n  seg: Seg,\n  timeFormat: DateFormatter,\n  context: ViewContext,\n  timeHeaderId: string,\n  dateHeaderId: string,\n): ComponentChildren {\n  let { options } = context\n\n  if (options.displayEventTime !== false) {\n    let eventDef = seg.eventRange.def\n    let eventInstance = seg.eventRange.instance\n    let doAllDay = false\n    let timeText: string\n\n    if (eventDef.allDay) {\n      doAllDay = true\n    } else if (isMultiDayRange(seg.eventRange.range)) { // TODO: use (!isStart || !isEnd) instead?\n      if (seg.isStart) {\n        timeText = buildSegTimeText(\n          seg,\n          timeFormat,\n          context,\n          null,\n          null,\n          eventInstance.range.start,\n          seg.end,\n        )\n      } else if (seg.isEnd) {\n        timeText = buildSegTimeText(\n          seg,\n          timeFormat,\n          context,\n          null,\n          null,\n          seg.start,\n          eventInstance.range.end,\n        )\n      } else {\n        doAllDay = true\n      }\n    } else {\n      timeText = buildSegTimeText(\n        seg,\n        timeFormat,\n        context,\n      )\n    }\n\n    if (doAllDay) {\n      let hookProps: AllDayContentArg = {\n        text: context.options.allDayText,\n        view: context.viewApi,\n      }\n\n      return (\n        <RenderHook<AllDayContentArg> // needed?\n          hookProps={hookProps}\n          classNames={options.allDayClassNames}\n          content={options.allDayContent}\n          defaultContent={renderAllDayInner}\n          didMount={options.allDayDidMount}\n          willUnmount={options.allDayWillUnmount}\n        >\n          {(rootElRef, classNames, innerElRef, innerContent) => (\n            <td ref={rootElRef} headers={`${timeHeaderId} ${dateHeaderId}`} className={['fc-list-event-time'].concat(classNames).join(' ')}>\n              {innerContent}\n            </td>\n          )}\n        </RenderHook>\n      )\n    }\n\n    return (\n      <td className=\"fc-list-event-time\">\n        {timeText}\n      </td>\n    )\n  }\n\n  return null\n}\n\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text\n}\n","import {\n  createElement,\n  ViewProps,\n  Scroller,\n  DateMarker,\n  addDays,\n  startOfDay,\n  DateRange,\n  intersectRanges,\n  DateProfile,\n  EventUiHash,\n  EventRenderRange,\n  sliceEventStore,\n  EventStore,\n  memoize,\n  Seg,\n  VNode,\n  sortEventSegs,\n  getSegMeta,\n  NowTimer,\n  ViewRoot,\n  RenderHook,\n  DateComponent,\n  ViewApi,\n  MountArg,\n  getUniqueDomId,\n  formatDayString,\n} from '@fullcalendar/common'\nimport { ListViewHeaderRow } from './ListViewHeaderRow'\nimport { ListViewEventRow } from './ListViewEventRow'\n\nexport interface NoEventsContentArg {\n  text: string\n  view: ViewApi\n}\n\nexport type NoEventsMountArg = MountArg<NoEventsContentArg>\n\n/*\nResponsible for the scroller, and forwarding event-related actions into the \"grid\".\n*/\nexport class ListView extends DateComponent<ViewProps> {\n  private computeDateVars = memoize(computeDateVars)\n  private eventStoreToSegs = memoize(this._eventStoreToSegs)\n  state = {\n    timeHeaderId: getUniqueDomId(),\n    eventHeaderId: getUniqueDomId(),\n    dateHeaderIdRoot: getUniqueDomId(),\n  }\n\n  render() {\n    let { props, context } = this\n\n    let extraClassNames = [\n      'fc-list',\n      context.theme.getClass('table'), // just for the outer border. will be on div\n      context.options.stickyHeaderDates !== false ? 'fc-list-sticky' : '',\n    ]\n\n    let { dayDates, dayRanges } = this.computeDateVars(props.dateProfile)\n    let eventSegs = this.eventStoreToSegs(props.eventStore, props.eventUiBases, dayRanges)\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec} elRef={this.setRootEl}>\n        {(rootElRef, classNames) => (\n          <div ref={rootElRef} className={extraClassNames.concat(classNames).join(' ')}>\n            <Scroller\n              liquid={!props.isHeightAuto}\n              overflowX={props.isHeightAuto ? 'visible' : 'hidden'}\n              overflowY={props.isHeightAuto ? 'visible' : 'auto'}\n            >\n              {eventSegs.length > 0 ?\n                this.renderSegList(eventSegs, dayDates) :\n                this.renderEmptyMessage()}\n            </Scroller>\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  setRootEl = (rootEl: HTMLDivElement | null) => {\n    if (rootEl) {\n      this.context.registerInteractiveComponent(this, { // TODO: make aware that it doesn't do Hits\n        el: rootEl,\n      })\n    } else {\n      this.context.unregisterInteractiveComponent(this)\n    }\n  }\n\n  renderEmptyMessage() {\n    let { options, viewApi } = this.context\n    let hookProps: NoEventsContentArg = {\n      text: options.noEventsText,\n      view: viewApi,\n    }\n\n    return (\n      <RenderHook<NoEventsContentArg> // needed???\n        hookProps={hookProps}\n        classNames={options.noEventsClassNames}\n        content={options.noEventsContent}\n        defaultContent={renderNoEventsInner}\n        didMount={options.noEventsDidMount}\n        willUnmount={options.noEventsWillUnmount}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => (\n          <div className={['fc-list-empty'].concat(classNames).join(' ')} ref={rootElRef}>\n            <div className=\"fc-list-empty-cushion\" ref={innerElRef}>\n              {innerContent}\n            </div>\n          </div>\n        )}\n      </RenderHook>\n    )\n  }\n\n  renderSegList(allSegs: Seg[], dayDates: DateMarker[]) {\n    let { theme, options } = this.context\n    let { timeHeaderId, eventHeaderId, dateHeaderIdRoot } = this.state\n    let segsByDay = groupSegsByDay(allSegs) // sparse array\n\n    return (\n      <NowTimer unit=\"day\">\n        {(nowDate: DateMarker, todayRange: DateRange) => {\n          let innerNodes: VNode[] = []\n\n          for (let dayIndex = 0; dayIndex < segsByDay.length; dayIndex += 1) {\n            let daySegs = segsByDay[dayIndex]\n\n            if (daySegs) { // sparse array, so might be undefined\n              let dayStr = formatDayString(dayDates[dayIndex])\n              let dateHeaderId = dateHeaderIdRoot + '-' + dayStr\n\n              // append a day header\n              innerNodes.push(\n                <ListViewHeaderRow\n                  key={dayStr}\n                  cellId={dateHeaderId}\n                  dayDate={dayDates[dayIndex]}\n                  todayRange={todayRange}\n                />,\n              )\n\n              daySegs = sortEventSegs(daySegs, options.eventOrder)\n\n              for (let seg of daySegs) {\n                innerNodes.push(\n                  <ListViewEventRow\n                    key={dayStr + ':' + seg.eventRange.instance.instanceId /* are multiple segs for an instanceId */}\n                    seg={seg}\n                    isDragging={false}\n                    isResizing={false}\n                    isDateSelecting={false}\n                    isSelected={false}\n                    timeHeaderId={timeHeaderId}\n                    eventHeaderId={eventHeaderId}\n                    dateHeaderId={dateHeaderId}\n                    {...getSegMeta(seg, todayRange, nowDate)}\n                  />,\n                )\n              }\n            }\n          }\n\n          return (\n            <table className={'fc-list-table ' + theme.getClass('table')}>\n              <thead>\n                <tr>\n                  <th scope=\"col\" id={timeHeaderId}>{options.timeHint}</th>\n                  <th scope=\"col\" aria-hidden />\n                  <th scope=\"col\" id={eventHeaderId}>{options.eventHint}</th>\n                </tr>\n              </thead>\n              <tbody>{innerNodes}</tbody>\n            </table>\n          )\n        }}\n      </NowTimer>\n    )\n  }\n\n  _eventStoreToSegs(eventStore: EventStore, eventUiBases: EventUiHash, dayRanges: DateRange[]): Seg[] {\n    return this.eventRangesToSegs(\n      sliceEventStore(\n        eventStore,\n        eventUiBases,\n        this.props.dateProfile.activeRange,\n        this.context.options.nextDayThreshold,\n      ).fg,\n      dayRanges,\n    )\n  }\n\n  eventRangesToSegs(eventRanges: EventRenderRange[], dayRanges: DateRange[]) {\n    let segs = []\n\n    for (let eventRange of eventRanges) {\n      segs.push(...this.eventRangeToSegs(eventRange, dayRanges))\n    }\n\n    return segs\n  }\n\n  eventRangeToSegs(eventRange: EventRenderRange, dayRanges: DateRange[]) {\n    let { dateEnv } = this.context\n    let { nextDayThreshold } = this.context.options\n    let range = eventRange.range\n    let allDay = eventRange.def.allDay\n    let dayIndex\n    let segRange\n    let seg\n    let segs = []\n\n    for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex += 1) {\n      segRange = intersectRanges(range, dayRanges[dayIndex])\n\n      if (segRange) {\n        seg = {\n          component: this,\n          eventRange,\n          start: segRange.start,\n          end: segRange.end,\n          isStart: eventRange.isStart && segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: eventRange.isEnd && segRange.end.valueOf() === range.end.valueOf(),\n          dayIndex,\n        }\n\n        segs.push(seg)\n\n        // detect when range won't go fully into the next day,\n        // and mutate the latest seg to the be the end.\n        if (\n          !seg.isEnd && !allDay &&\n          dayIndex + 1 < dayRanges.length &&\n          range.end <\n            dateEnv.add(\n              dayRanges[dayIndex + 1].start,\n              nextDayThreshold,\n            )\n        ) {\n          seg.end = range.end\n          seg.isEnd = true\n          break\n        }\n      }\n    }\n\n    return segs\n  }\n}\n\nfunction renderNoEventsInner(hookProps) {\n  return hookProps.text\n}\n\nfunction computeDateVars(dateProfile: DateProfile) {\n  let dayStart = startOfDay(dateProfile.renderRange.start)\n  let viewEnd = dateProfile.renderRange.end\n  let dayDates: DateMarker[] = []\n  let dayRanges: DateRange[] = []\n\n  while (dayStart < viewEnd) {\n    dayDates.push(dayStart)\n\n    dayRanges.push({\n      start: dayStart,\n      end: addDays(dayStart, 1),\n    })\n\n    dayStart = addDays(dayStart, 1)\n  }\n\n  return { dayDates, dayRanges }\n}\n\n// Returns a sparse array of arrays, segs grouped by their dayIndex\nfunction groupSegsByDay(segs): Seg[][] {\n  let segsByDay = [] // sparse array\n  let i\n  let seg\n\n  for (i = 0; i < segs.length; i += 1) {\n    seg = segs[i];\n    (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = []))\n      .push(seg)\n  }\n\n  return segsByDay\n}\n","import {\n  identity,\n  Identity,\n  ClassNamesGenerator,\n  CustomContentGenerator,\n  DidMountHandler,\n  WillUnmountHandler,\n  createFormatter,\n  FormatterInput,\n} from '@fullcalendar/common'\n\n// public\nimport {\n  NoEventsContentArg,\n  NoEventsMountArg,\n} from './api-type-deps'\n\nexport const OPTION_REFINERS = {\n  listDayFormat: createFalsableFormatter, // defaults specified in list plugins\n  listDaySideFormat: createFalsableFormatter, // \"\n\n  noEventsClassNames: identity as Identity<ClassNamesGenerator<NoEventsContentArg>>,\n  noEventsContent: identity as Identity<CustomContentGenerator<NoEventsContentArg>>,\n  noEventsDidMount: identity as Identity<DidMountHandler<NoEventsMountArg>>,\n  noEventsWillUnmount: identity as Identity<WillUnmountHandler<NoEventsMountArg>>,\n\n  // noEventsText is defined in base options\n}\n\nfunction createFalsableFormatter(input: FormatterInput | false) {\n  return input === false ? null : createFormatter(input)\n}\n","import { createPlugin } from '@fullcalendar/common'\nimport { ListView } from './ListView'\nimport { OPTION_REFINERS } from './options'\nimport './options-declare'\nimport './main.css'\n\nexport { ListView }\nexport * from './api-type-deps'\n\nexport default createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  views: {\n\n    list: {\n      component: ListView,\n      buttonTextKey: 'list', // what to lookup in locale files\n      listDayFormat: { month: 'long', day: 'numeric', year: 'numeric' }, // like \"January 1, 2016\"\n    },\n\n    listDay: {\n      type: 'list',\n      duration: { days: 1 },\n      listDayFormat: { weekday: 'long' }, // day-of-week is all we need. full date is probably in headerToolbar\n    },\n\n    listWeek: {\n      type: 'list',\n      duration: { weeks: 1 },\n      listDayFormat: { weekday: 'long' }, // day-of-week is more important\n      listDaySideFormat: { month: 'long', day: 'numeric', year: 'numeric' },\n    },\n\n    listMonth: {\n      type: 'list',\n      duration: { month: 1 },\n      listDaySideFormat: { weekday: 'long' }, // day-of-week is nice-to-have\n    },\n\n    listYear: {\n      type: 'list',\n      duration: { year: 1 },\n      listDaySideFormat: { weekday: 'long' }, // day-of-week is nice-to-have\n    },\n\n  },\n})\n"]},"metadata":{},"sourceType":"module"}
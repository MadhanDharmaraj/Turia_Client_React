{"ast":null,"code":"import * as React from 'react';\n\nvar isCheckBoxInput = element => element.type === 'checkbox';\n\nvar isDateObject = data => data instanceof Date;\n\nvar isNullOrUndefined = value => value == null;\n\nconst isObjectType = value => typeof value === 'object';\n\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\n\nvar getControllerValue = event => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\n\nvar getNodeParentName = name => name.substring(0, name.search(/.\\d/)) || name;\n\nvar isNameInFieldArray = (names, name) => [...names].some(current => getNodeParentName(name) === current);\n\nvar compact = value => value.filter(Boolean);\n\nvar isUndefined = val => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n  }\n\n  return undefined;\n};\n\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\n\nvar omit = (source, key) => {\n  const copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\n\nconst HookFormContext = React.createContext(null);\n\nconst useFormContext = () => React.useContext(HookFormContext);\n\nconst FormProvider = props => React.createElement(HookFormContext.Provider, {\n  value: omit(props, 'children')\n}, props.children);\n\nvar getProxyFormState = function (formState, _proxyFormState, localProxyFormState) {\n  let isRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  function createGetter(prop) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n\n      return undefined;\n    };\n  }\n\n  const result = {};\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key)\n    });\n  }\n\n  return result;\n};\n\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\n  const formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find(key => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));\n};\n\nvar convertToArrayPayload = value => Array.isArray(value) ? value : [value];\n\nvar shouldSubscribeByName = (name, signalName) => !name || !signalName || convertToArrayPayload(name).some(currentName => currentName && (currentName.startsWith(signalName) || signalName.startsWith(currentName)));\n\nconst tearDown = _unsubscribe => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n\n    _unsubscribe.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps = _ref => {\n  let {\n    _unsubscribe,\n    props\n  } = _ref;\n  return () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback\n      });\n    }\n  };\n};\n\nfunction useSubscribe(props) {\n  const _unsubscribe = React.useRef();\n\n  const _updateSubscription = React.useRef(() => {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props\n  });\n  !props.skipEarlySubscription && _updateSubscription.current();\n  React.useEffect(() => {\n    _updateSubscription.current();\n\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\n\nfunction useFormState(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    disabled,\n    name\n  } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n\n  const _name = React.useRef(name);\n\n  _name.current = name;\n  useSubscribe({\n    disabled,\n    callback: formState => shouldSubscribeByName(_name.current, formState.name) && shouldRenderFormState(formState, _localProxyFormState.current) && updateFormState(Object.assign(Object.assign({}, control._formState), formState)),\n    subject: control._subjects.state,\n    skipEarlySubscription: true\n  });\n  return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\n}\n\nfunction useController(props) {\n  const methods = useFormContext();\n  const {\n    name,\n    control = methods.control,\n    shouldUnregister\n  } = props;\n  const [value, setInputStateValue] = React.useState(get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)));\n  const formState = useFormState({\n    control: control || methods.control,\n    name\n  });\n\n  const _name = React.useRef(name);\n\n  _name.current = name;\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: data => (!data.name || _name.current === data.name) && setInputStateValue(get(data.values, _name.current)),\n    skipEarlySubscription: true\n  });\n  const registerProps = control.register(name, Object.assign(Object.assign({}, props.rules), {\n    value\n  }));\n  const updateMounted = React.useCallback((name, value) => {\n    const field = get(control._fields, name);\n\n    if (field) {\n      field._f.mount = value;\n    }\n  }, [control]);\n  React.useEffect(() => {\n    updateMounted(name, true);\n    return () => {\n      const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n\n      if (isNameInFieldArray(control._names.array, name) ? _shouldUnregisterField && !control._stateFlags.action : _shouldUnregisterField) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n  return {\n    field: {\n      onChange: event => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n        registerProps.onChange({\n          target: {\n            value,\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name,\n      value,\n      ref: elm => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: message => elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity()\n          };\n        }\n      }\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name)\n    }\n  };\n}\n\nconst Controller = props => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\n\nvar isKey = value => /^\\w*$/.test(value);\n\nvar stringToPath = input => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nvar getFocusFieldName = function (name, index) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return options.shouldFocus || isUndefined(options.shouldFocus) ? options.focusName || `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.` : '';\n};\n\nvar mapCurrentIds = (values, _fieldIds, keyName) => values.map((value, index) => {\n  const output = _fieldIds.current[index];\n  return Object.assign(Object.assign({}, value), output ? {\n    [keyName]: output[keyName]\n  } : {});\n});\n\nvar generateId = () => {\n  const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nvar mapIds = function () {\n  let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let keyName = arguments.length > 1 ? arguments[1] : undefined;\n  return values.map(value => Object.assign(Object.assign({}, value[keyName] ? {} : {\n    [keyName]: generateId()\n  }), value));\n};\n\nfunction append(data, value) {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n\nvar fillEmptyArray = value => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...convertToArrayPayload(value), ...data.slice(index)];\n}\n\nvar moveArrayAt = (data, from, to) => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n\nvar omitKeys = (fields, keyName) => fields.map(function () {\n  let field = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return omit(field, keyName);\n});\n\nfunction prepend(data, value) {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\n\nvar updateAt = (fieldValues, index, value) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n\nconst useFieldArray = props => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id',\n    shouldUnregister\n  } = props;\n  const [fields, setFields] = React.useState(mapIds(control._getFieldArray(name), keyName));\n\n  const _fieldIds = React.useRef(fields);\n\n  const _name = React.useRef(name);\n\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: _ref2 => {\n      let {\n        values,\n        name: fieldArrayName\n      } = _ref2;\n\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n    skipEarlySubscription: true\n  });\n  const updateValues = React.useCallback(updatedFieldArrayValuesWithKey => {\n    const updatedFieldArrayValues = omitKeys(updatedFieldArrayValuesWithKey, keyName);\n    _actioned.current = true;\n    set(control._formValues, name, updatedFieldArrayValues);\n    setFields(updatedFieldArrayValuesWithKey);\n    return updatedFieldArrayValues;\n  }, [control, name, keyName]);\n\n  const append$1 = (value, options) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = append(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(appendValue, keyName));\n\n    control._updateFieldArray(name, append, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n\n    control._names.focus = getFocusFieldName(name, updatedFieldArrayValuesWithKey.length - appendValue.length, options);\n  };\n\n  const prepend$1 = (value, options) => {\n    const updatedFieldArrayValuesWithKey = prepend(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(convertToArrayPayload(value), keyName));\n\n    control._updateFieldArray(name, prepend, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = index => {\n    const updatedFieldArrayValuesWithKey = removeArrayAt(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index);\n\n    control._updateFieldArray(name, removeArrayAt, {\n      argA: index\n    }, updateValues(updatedFieldArrayValuesWithKey));\n  };\n\n  const insert$1 = (index, value, options) => {\n    const updatedFieldArrayValuesWithKey = insert(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index, mapIds(convertToArrayPayload(value), keyName));\n\n    control._updateFieldArray(name, insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA, indexB) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n\n    control._updateFieldArray(name, swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n  };\n\n  const move = (from, to) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n\n    control._updateFieldArray(name, moveArrayAt, {\n      argA: from,\n      argB: to\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n  };\n\n  const update = (index, value) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    const updatedFieldArrayValues = updateAt(updatedFieldArrayValuesWithKey, index, value);\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n\n    control._updateFieldArray(name, updateAt, {\n      argA: index,\n      argB: value\n    }, updateValues(_fieldIds.current), true, false);\n  };\n\n  const replace = value => {\n    const updatedFieldArrayValuesWithKey = mapIds(convertToArrayPayload(value), keyName);\n\n    control._updateFieldArray(name, () => updatedFieldArrayValuesWithKey, {}, updateValues(updatedFieldArrayValuesWithKey), true, false);\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n\n          break;\n        }\n      }\n    }\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then(result => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n\n          control._subjects.state.next({\n            errors: control._formState.errors\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues\n    });\n\n    control._names.focus && focusFieldBy(control._fields, key => key.startsWith(control._names.focus));\n    control._names.focus = '';\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend$1, [updateValues, name, control, keyName]),\n    append: React.useCallback(append$1, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert$1, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields\n  };\n};\n\nvar isFunction = value => typeof value === 'function';\n\nfunction cloneObject(data) {\n  let copy;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n\nfunction createSubscription() {\n  let tearDowns = [];\n\n  const add = tearDown => {\n    tearDowns.push(tearDown);\n  };\n\n  const unsubscribe = () => {\n    for (const teardown of tearDowns) {\n      teardown();\n    }\n\n    tearDowns = [];\n  };\n\n  return {\n    add,\n    unsubscribe\n  };\n}\n\nfunction createSubscriber(observer, subscription) {\n  let closed = false;\n  subscription.add(() => closed = true);\n\n  const next = value => {\n    if (!closed) {\n      observer.next(value);\n    }\n  };\n\n  return {\n    next\n  };\n}\n\nfunction createSubject() {\n  let _observers = [];\n\n  const next = value => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = observer => {\n    const subscription = createSubscription();\n    const subscriber = createSubscriber(observer, subscription);\n\n    _observers.push(subscriber);\n\n    return subscription;\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n\n    next,\n    subscribe,\n    unsubscribe\n  };\n}\n\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nvar getValidationModes = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\n\nvar isBoolean = value => typeof value === 'boolean';\n\nvar isFileInput = element => element.type === 'file';\n\nvar isHTMLElement = value => value instanceof HTMLElement;\n\nvar isMultipleSelect = element => element.type === `select-multiple`;\n\nvar isRadioInput = element => element.type === 'radio';\n\nvar isRadioOrCheckboxFunction = ref => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar isString = value => typeof value === 'string';\n\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\n\nvar live = ref => isHTMLElement(ref) && document.contains(ref);\n\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.checked && !option.disabled).map(option => option.value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    return options[0].checked && !options[0].disabled ? // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nvar getFieldValueAs = (value, _ref3) => {\n  let {\n    valueAsNumber,\n    valueAsDate,\n    setValueAs\n  } = _ref3;\n  return isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate ? new Date(value) : setValueAs ? setValueAs(value) : value;\n};\n\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\n\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {\n  isValid: true,\n  value: option.value\n} : previous, defaultReturn) : defaultReturn;\n\nfunction getFieldValue(_f) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every(ref => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(_ref4 => {\n      let {\n        value\n      } = _ref4;\n      return value;\n    });\n  }\n\n  if (isCheckBoxInput(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n  const fields = {};\n\n  for (const name of fieldsNames) {\n    const field = get(_fields, name);\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames],\n    fields,\n    shouldUseNativeValidation\n  };\n};\n\nvar hasValidation = options => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return {\n        name\n      };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name\n  };\n}\n\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n\n  return target;\n}\n\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        !isNullOrUndefined(defaultValues) && deepEqual(get(defaultValues[index] || {}, key), values[index][key]) ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), {\n          [key]: true\n        });\n      }\n    }\n\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n\n  return dirtyFields;\n}\n\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n\n  return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name, [])).length && unset(ref, name);\n\nvar isMessage = value => isString(value) || React.isValidElement(value);\n\nvar isRegex = value => value instanceof RegExp;\n\nfunction getValidateError(result, ref) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\n\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled\n  } = field._f;\n\n  if (!mount || disabled) {\n    return {};\n  }\n\n  const inputRef = refs ? refs[0] : ref;\n\n  const setCustomValidty = message => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n  const getMinMaxMessage = function (exceedMax, maxLengthMessage, minLengthMessage) {\n    let maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n    let minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n  };\n\n  if (required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(inputValue);\n\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\n\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: inputRef\n        }, validationResult);\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true\n};\nconst isWindowUndefined = typeof window === 'undefined';\n\nfunction createFormControl() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  let _options = Object.assign(Object.assign({}, defaultOptions), props);\n\n  let _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  };\n  let _fields = {};\n\n  let _defaultValues = _options.defaultValues || {};\n\n  let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);\n\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false\n  };\n  let _names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set()\n  };\n  let delayErrorCallback;\n  let timer = 0;\n  let validateFields = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  };\n  const _subjects = {\n    watch: createSubject(),\n    control: createSubject(),\n    array: createSubject(),\n    state: createSubject()\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce = (callback, wait) => function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    clearTimeout(timer);\n    timer = window.setTimeout(() => callback(...args), wait);\n  };\n\n  const isFieldWatched = (name, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async shouldSkipRender => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver ? isEmptyObject((await _executeSchema()).errors) : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n\n        _subjects.state.next({\n          isValid\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray = function (name, method, args) {\n    let values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let shouldSetValues = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    let shouldSetFields = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid\n    });\n  };\n\n  const updateErrors = (name, error) => (set(_formState.errors, name, error), _subjects.state.next({\n    errors: _formState.errors\n  }));\n\n  const updateValidAndValue = (name, shouldSkipSetValueAs, ref) => {\n    const field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n      isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = function (name, fieldValue, isCurrentTouched) {\n    let shouldRender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let isFieldDirty = false;\n    const output = {\n      name\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n      isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty = isFieldDirty || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty = isFieldDirty || _proxyFormState.touchedFields && isPreviousFieldTouched !== isCurrentTouched;\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name, value) => (set(_formState.dirtyFields, name, setFieldArrayDirtyFields(value, get(_defaultValues, name, []), get(_formState.dirtyFields, name, []))), unsetEmptyArray(_formState.dirtyFields, name));\n\n  const shouldRenderByError = async (shouldSkipRender, name, isValid, error, fieldState) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback = delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n    }\n\n    if (((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) && !shouldSkipRender) {\n      const updatedFormState = Object.assign(Object.assign(Object.assign({}, fieldState), shouldUpdateValid ? {\n        isValid\n      } : {}), {\n        errors: _formState.errors,\n        name\n      });\n      _formState = Object.assign(Object.assign({}, _formState), updatedFormState);\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false\n      });\n\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async name => _options.resolver ? await _options.resolver(Object.assign({}, _formValues), _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation)) : {};\n\n  const executeSchemaAndUpdateState = async names => {\n    const {\n      errors\n    } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async function (fields, shouldOnlyCheckValid) {\n    let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      valid: true\n    };\n\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name] ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name]) : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue && (await executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name);\n      field && (field._f.refs ? field._f.refs.every(ref => !live(ref)) : !live(field._f.ref)) && unregister(name);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty = (name, data) => (name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues));\n\n  const _getWatch = (names, defaultValue, isGlobal) => {\n    const fieldValues = Object.assign({}, _stateFlags.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? {\n      [names]: defaultValue\n    } : defaultValue);\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(fieldName => (isGlobal && _names.watch.add(fieldName), get(fieldValues, fieldName)));\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = name => get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []);\n\n  const setFieldValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let shouldRender = arguments.length > 3 ? arguments[3] : undefined;\n    const field = get(_fields, name);\n    let fieldValue = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n        fieldValue = isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? '' : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(selectRef => selectRef.selected = fieldValue.includes(selectRef.value));\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1 ? fieldReference.refs.forEach(checkboxRef => checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find(data => data === checkboxRef.value) : fieldValue === checkboxRef.value) : fieldReference.refs[0].checked = !!fieldValue;\n          } else {\n            fieldReference.refs.forEach(radioRef => radioRef.checked = radioRef.value === fieldValue);\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender && _subjects.control.next({\n          values: _formValues,\n          name\n        });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n    options.shouldValidate && trigger(name);\n  };\n\n  const setValues = (name, value, options) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n      (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const field = get(_fields, name);\n\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues\n      });\n\n      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value)\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value) ? setValues(name, value, options) : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n\n    _subjects.watch.next({\n      name\n    });\n  };\n\n  const handleChange = async event => {\n    const target = event.target;\n    let name = target.name;\n    const field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n      const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n      !isBlurEvent && _subjects.watch.next({\n        name,\n        type: event.type\n      });\n\n      if (shouldSkipValidation) {\n        return shouldRender && _subjects.state.next(Object.assign({\n          name\n        }, isWatched ? {} : fieldState));\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n      validateFields[name] = validateFields[name] ? +1 : 1;\n      _proxyFormState.isValidating && _subjects.state.next({\n        isValidating: true\n      });\n\n      if (_options.resolver) {\n        const {\n          errors\n        } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n        const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps);\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger = async function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name);\n\n    _subjects.state.next({\n      isValidating: true\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n      isValid = isEmptyObject(errors);\n      validationResult = name ? !fieldNames.some(name => get(errors, name)) : isValid;\n    } else if (name) {\n      validationResult = (await Promise.all(fieldNames.map(async fieldName => {\n        const field = get(_fields, fieldName);\n        return await executeBuildInValidation(field && field._f ? {\n          [fieldName]: field\n        } : field);\n      }))).every(Boolean);\n\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next(Object.assign(Object.assign(Object.assign({}, !isString(name) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : {\n      name\n    }), _options.resolver ? {\n      isValid\n    } : {}), {\n      errors: _formState.errors,\n      isValidating: false\n    }));\n\n    options.shouldFocus && !validationResult && focusFieldBy(_fields, key => get(_formState.errors, key), name ? fieldNames : _names.mount);\n    return validationResult;\n  };\n\n  const getValues = fieldNames => {\n    const values = Object.assign(Object.assign({}, _defaultValues), _stateFlags.mount ? _formValues : {});\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(name => get(values, name));\n  };\n\n  const clearErrors = name => {\n    name ? convertToArrayPayload(name).forEach(inputName => unset(_formState.errors, inputName)) : _formState.errors = {};\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true\n    });\n  };\n\n  const setError = (name, error, options) => {\n    const ref = (get(_fields, name, {\n      _f: {}\n    })._f || {}).ref;\n    set(_formState.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch = (name, defaultValue) => isFunction(name) ? _subjects.watch.subscribe({\n    next: info => name(_getWatch(undefined, defaultValue), info)\n  }) : _getWatch(name, defaultValue, true);\n\n  const unregister = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next(Object.assign(Object.assign({}, _formState), !options.keepDirty ? {} : {\n      isDirty: _getDirty()\n    }));\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const field = get(_fields, name);\n    set(_fields, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name\n        }\n      }), {\n        name,\n        mount: true\n      }), options)\n    });\n\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n    field ? isBoolean(options.disabled) && set(_formValues, name, options.disabled ? undefined : get(_formValues, name, getFieldValue(field._f))) : updateValidAndValue(name, true);\n    return isWindowUndefined ? {\n      name: name\n    } : Object.assign(Object.assign({\n      name\n    }, isBoolean(options.disabled) ? {\n      disabled: options.disabled\n    } : {}), {\n      onChange: handleChange,\n      onBlur: handleChange,\n      ref: ref => {\n        if (ref) {\n          register(name, options);\n          let field = get(_fields, name);\n          const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll('input,select,textarea')[0] || ref : ref : ref;\n          const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n          if (fieldRef === field._f.ref || isRadioOrCheckbox && compact(field._f.refs || []).find(option => option === fieldRef)) {\n            return;\n          }\n\n          field = {\n            _f: isRadioOrCheckbox ? Object.assign(Object.assign({}, field._f), {\n              refs: [...compact(field._f.refs || []).filter(live), fieldRef],\n              ref: {\n                type: fieldRef.type,\n                name\n              }\n            }) : Object.assign(Object.assign({}, field._f), {\n              ref: fieldRef\n            })\n          };\n          set(_fields, name, field);\n          (!options || !options.disabled) && updateValidAndValue(name, false, fieldRef);\n        } else {\n          const field = get(_fields, name, {});\n          const shouldUnregister = _options.shouldUnregister || options.shouldUnregister;\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          shouldUnregister && !(isNameInFieldArray(_names.array, name) && _stateFlags.action) && _names.unMount.add(name);\n        }\n      }\n    });\n  };\n\n  const handleSubmit = (onValid, onInvalid) => async e => {\n    if (e) {\n      e.preventDefault && e.preventDefault();\n      e.persist && e.persist();\n    }\n\n    let hasNoPromiseError = true;\n    let fieldValues = Object.assign({}, _formValues);\n\n    _subjects.state.next({\n      isSubmitting: true\n    });\n\n    try {\n      if (_options.resolver) {\n        const {\n          errors,\n          values\n        } = await _executeSchema();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await executeBuildInValidation(_fields);\n      }\n\n      if (isEmptyObject(_formState.errors) && Object.keys(_formState.errors).every(name => get(fieldValues, name))) {\n        _subjects.state.next({\n          errors: {},\n          isSubmitting: true\n        });\n\n        await onValid(fieldValues, e);\n      } else {\n        onInvalid && (await onInvalid(_formState.errors, e));\n        _options.shouldFocusError && focusFieldBy(_fields, key => get(_formState.errors, key), _names.mount);\n      }\n    } catch (err) {\n      hasNoPromiseError = false;\n      throw err;\n    } finally {\n      _formState.isSubmitted = true;\n\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors\n      });\n    }\n  };\n\n  const reset = function (formValues) {\n    let keepStateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) && fieldReference.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: ''\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? _formState.isDirty : keepStateOptions.keepDefaultValues ? !deepEqual(formValues, _defaultValues) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? Object.entries(formValues).reduce((previous, _ref5) => {\n        let [key, value] = _ref5;\n        return Object.assign(Object.assign({}, previous), {\n          [key]: value !== get(_defaultValues, key)\n        });\n      }, {}) : {},\n      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n\n    _stateFlags.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus = name => {\n    const field = get(_fields, name)._f;\n\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n\n      get _fields() {\n        return _fields;\n      },\n\n      set _fields(value) {\n        _fields = value;\n      },\n\n      get _formValues() {\n        return _formValues;\n      },\n\n      set _formValues(value) {\n        _formValues = value;\n      },\n\n      get _stateFlags() {\n        return _stateFlags;\n      },\n\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n\n      get _defaultValues() {\n        return _defaultValues;\n      },\n\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n\n      get _names() {\n        return _names;\n      },\n\n      set _names(value) {\n        _names = value;\n      },\n\n      get _formState() {\n        return _formState;\n      },\n\n      set _formState(value) {\n        _formState = value;\n      },\n\n      get _options() {\n        return _options;\n      },\n\n      set _options(value) {\n        _options = Object.assign(Object.assign({}, _options), value);\n      }\n\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus\n  };\n}\n\nfunction useForm() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  const _formControl = React.useRef();\n\n  const [formState, updateFormState] = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = Object.assign(Object.assign({}, createFormControl(props)), {\n      formState\n    });\n  }\n\n  const control = _formControl.current.control;\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: formState => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = Object.assign(Object.assign({}, control._formState), formState);\n        updateFormState(Object.assign({}, control._formState));\n      }\n    }\n  });\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n\n      control._subjects.state.next({});\n    }\n\n    control._removeUnmounted();\n  });\n  React.useEffect(() => () => Object.values(control._subjects).forEach(subject => subject.unsubscribe()), [control]);\n  _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\n  return _formControl.current;\n}\n\nfunction useWatch(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled\n  } = props || {};\n\n  const _name = React.useRef(name);\n\n  _name.current = name;\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: formState => {\n      if (shouldSubscribeByName(_name.current, formState.name)) {\n        control._stateFlags.mount = true;\n\n        const fieldValues = control._getWatch(_name.current, defaultValue);\n\n        updateValue(isObject(fieldValues) ? Object.assign({}, fieldValues) : Array.isArray(fieldValues) ? [...fieldValues] : fieldValues);\n      }\n    }\n  });\n  const [value, updateValue] = React.useState(isUndefined(defaultValue) ? control._getWatch(name) : defaultValue);\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n  return value;\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getControllerValue.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/logic/shouldSubscribeByName.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/useController.ts","../src/controller.tsx","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/omitKeys.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/useFieldArray.ts","../src/utils/isFunction.ts","../src/utils/cloneObject.ts","../src/utils/createSubject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/isString.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/unset.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/logic/schemaErrorLookup.ts","../src/utils/deepMerge.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/logic/skipValidation.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/useForm.ts","../src/useWatch.ts"],"names":["append","appendAt","prepend","prependAt","insert","insertAt","isCheckBox"],"mappings":"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","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T>(name?: T, signalName?: string) =>\n  !name ||\n  !signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (currentName.startsWith(signalName) ||\n        signalName.startsWith(currentName)),\n  );\n","import * as React from 'react';\n\nimport { Subject, TearDown } from './utils/createSubject';\nimport { Noop } from './types';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n  skipEarlySubscription?: boolean;\n};\n\ntype Unsubscribe = { unsubscribe: TearDown };\n\ntype Payload<T> = {\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>;\n  props: Props<T>;\n};\n\nconst tearDown = (\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>,\n) => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n    _unsubscribe.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps =\n  <T>({ _unsubscribe, props }: Payload<T>) =>\n  () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback,\n      });\n    }\n  };\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _unsubscribe = React.useRef<Unsubscribe>();\n  const _updateSubscription = React.useRef<Noop>(() => {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props,\n  });\n\n  !props.skipEarlySubscription && _updateSubscription.current();\n\n  React.useEffect(() => {\n    _updateSubscription.current();\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport { FieldValues, UseFormStateProps, UseFormStateReturn } from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      shouldSubscribeByName(_name.current, formState.name) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n    skipEarlySubscription: true,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: (data) =>\n      (!data.name || _name.current === data.name) &&\n      setInputStateValue(get(data.values, _name.current)),\n    skipEarlySubscription: true,\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n    skipEarlySubscription: true,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      _actioned.current = true;\n      set(control._formValues, name, updatedFieldArrayValues);\n      setFields(updatedFieldArrayValuesWithKey);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = Noop;\n\nexport type Subscription = {\n  add: (tearDown: TearDown) => void;\n  unsubscribe: () => void;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: Noop;\n};\n\nfunction createSubscription() {\n  let tearDowns: TearDown[] = [];\n\n  const add = (tearDown: TearDown) => {\n    tearDowns.push(tearDown);\n  };\n\n  const unsubscribe = () => {\n    for (const teardown of tearDowns) {\n      teardown();\n    }\n    tearDowns = [];\n  };\n\n  return {\n    add,\n    unsubscribe,\n  };\n}\n\nfunction createSubscriber<T>(\n  observer: Observer<T>,\n  subscription: Subscription,\n): Observer<T> {\n  let closed = false;\n  subscription.add(() => (closed = true));\n\n  const next = (value: T) => {\n    if (!closed) {\n      observer.next(value);\n    }\n  };\n\n  return {\n    next,\n  };\n}\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>) => {\n    const subscription = createSubscription();\n    const subscriber = createSubscriber(observer, subscription);\n    _observers.push(subscriber);\n    return subscription;\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    control: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(\n        (fieldName) => (\n          isGlobal && _names.watch.add(fieldName as InternalFieldName),\n          get(fieldValues, fieldName as InternalFieldName)\n        ),\n      );\n\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender &&\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues,\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  React.useEffect(\n    () => () =>\n      Object.values(control._subjects).forEach((subject) =>\n        subject.unsubscribe(),\n      ),\n    [control],\n  );\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n","import * as React from 'react';\n\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: (formState) => {\n      if (shouldSubscribeByName(_name.current, formState.name)) {\n        control._stateFlags.mount = true;\n        const fieldValues = control._getWatch(\n          _name.current as InternalFieldName,\n          defaultValue as UnpackNestedValue<\n            DeepPartialSkipArrayKey<TFieldValues>\n          >,\n        );\n\n        updateValue(\n          isObject(fieldValues)\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}